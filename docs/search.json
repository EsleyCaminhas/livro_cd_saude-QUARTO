[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ciência de Dados Aplicada à Saúde Materno-Infantil",
    "section": "",
    "text": "Prefácio"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introdução",
    "section": "",
    "text": "Os dados considerados nas aplicações deste livro são provenientes do Sistema de Informação da Vigilância Epidemiológica da Gripe (SIVEP-Gripe), sistema oficial para o registro de casos e óbitos por Síndrome Respiratória Aguda Grave (SRAG) disponibilizado pelo Ministério da Saúde, e correspondem a registros de gestantes e puérperas de 10 a 55 anos hospitalizadas com SRAG por COVID-19 confirmada por teste de PCR. Dois conjuntos de dados diferentes são utilizados para ilustrar e demonstrar diversos aspectos dos conceitos abordados no texto.\n\n\nEssa base consiste em 11.485 de registros de gestantes e puérperas diagnosticadas com COVID-19 no período de março de 2020 a dezembro de 2021. Alguns estudos conduzidos pelo OOBr usaram esses dados, dentre os quais podem ser citados: Características demográficas e epidemiológicas sobre mulheres grávidas e puérperas que morreram de Síndrome Respiratória Aguda Grave no Brasil, Mortalidade materna associada à COVID-19 no Brasil em 2020 e 2021: comparação com mulheres não grávidas e homens e Desfechos da COVID-19 em puérperas, gestantes e mulheres não gestantes e nem puérperas hospitalizadas.\nO dicionários das variáveis a ser considerado neste livro está na Table 1.1.\n\n\nTable 1.1: Dicionário das variáveis da base de dados de COVID-19 em gestantes e puérperas.\n\n\n\n\n\n\n\nVariável\nDescrição\nValores\n\n\n\n\nsem_pri\nSemana epidemiológia dos primeiros sintomas\n1 a 52\n\n\nidade_anos\nIdade, em anos, da gestante ou puérpera\n10 a 55\n\n\nsg_uf\nSigla da Unidade Federativa de residência da gestante ou puérpera\nCódigo definido pelo IBGE\n\n\nid_mn_resi\nNome do município de residência da gestante ou puérpera\nNomes padronizados pelo IBGE\n\n\nco_mun_res\nCódigo do município de residência da gestante ou puérpera\nCódigo definido pelo IBGE\n\n\nco_mu_inte\nCódigo do município onde está localizado a Unidade de Saúde onde a gestante ou puérpera internou\nCódigo definido pelo IBGE\n\n\ndt_sin_pri\nData de primeiros sintomas do caso\nDia/Mês/Ano\n\n\ndt_evoluca_2\nData da alta ou do óbito da gestante ou puérpera\nAno/Mês/Dia\n\n\nano\nAno da infecção pelo COVID-19\n2020; 2021\n\n\nclassi_gesta_puerp\nIdade gestacional da gestante e puerpério\n1tri- 1° trimestre; 2tri- 2° trimestre; 3tri- 3° trimestre; puerp- puérpera\n\n\nraca\nRaça da gestante ou puérpera\namarela; branca; indígena; parda; preta\n\n\nescol\nNível de escolaridade da gestante ou puérpera\nsem escol- sem escolaridade (analfabeto); fund1- fundamental 1° ciclo (1ª a 5ª série); fund2- fundamental 2 (6ª a 9ª série); medio (1° ao 3° ano); superior\n\n\nmudou_muni\nSe gestante ou puérpera precisou se deslocar para outro município para realizar atendimento\nsim; não\n\n\nzona\nTipo de zona de residência da gestante ou puérpera\nrural; urbana; periurbana\n\n\nfaixa_et\nFaixa etária da gestante ou puérpera\n<20; 20-34; >=35\n\n\nhospital\nSe gestante ou puérpera foi hospitalizada\nsim; não\n\n\nhist_viagem\nSe gestante ou puérpera fez viagem internacional até 14 dias antes do início dos sintomas\nsim; não\n\n\nsg_para_srag\nSe o caso é proveniente de síndrome gripal (SG) que evoluiu para síndrome respiratória aguda grave (SRAG)\nsim; não\n\n\ninf_inter\nSe trata-se de caso nosocomial (infecção adquirida no hospital)\nsim; não\n\n\ncont_ave_suino\nSe a gestante ou puérpera trabalha ou tem contato direto com aves, suínos ou outros animais\nsim; não\n\n\nvacina\nSe a gestante ou puérpera recebeu vacina contra influenza\nsim; não\n\n\nvacina_cov\nSe a gestante ou puérpera recebeu vacina contra COVID-19\nsim; não\n\n\nantiviral\nQual antiviral que gestante ou puérpera usou para gripe\nOseltamivir; Zanamivir\n\n\nfebre\nSe gestante ou puérpera manifestou sintoma de febre\nsim; não\n\n\ntosse\nSe gestante ou puérpera manifestou sintoma de tosse\nsim; não\n\n\ngarganta\nSe gestante ou puérpera manifestou sintoma de dor de garganta\nsim; não\n\n\ndispneia\nSe gestante ou puérpera manifestou sintoma de dispneia\nsim; não\n\n\ndesc_resp\nSe gestante ou puérpera manifestou sintoma de desconforto respiratório\nsim; não\n\n\nsaturacao\nSe gestante ou puérpera manifestou sintoma de saturação\nsim; não\n\n\ndiarreia\nSe gestante ou puérpera manifestou sintoma de diarreia\nsim; não\n\n\nvomito\nSe gestante ou puérpera manifestou sintoma de vômito\nsim; não\n\n\ndor_abd\nSe gestante ou puérpera manifestou sintoma de dor abdominal\nsim; não\n\n\nfadiga\nSe gestante ou puérpera manifestou sintoma de fadiga\nsim; não\n\n\nperd_olft\nSe gestante ou puérpera manifestou sintoma de perda de olfato\nsim; não\n\n\nperd_pala\nSe gestante ou puérpera manifestou sintoma de perda de paladar\nsim; não\n\n\ncardiopati\nSe gestante ou puérpera tem doença cardiovascular crônica\nsim; não\n\n\nhematologi\nSe gestante ou puérpera tem doença hematológica crônica\nsim; não\n\n\nhepatica\nSe gestante ou puérpera tem doença hepática crônica\nsim; não\n\n\nasma\nSe gestante ou puérpera tem asma\nsim; não\n\n\ndiabetes\nSe gestante ou puérpera tem diabetes mellitus\nsim; não\n\n\nneuro\nSe gestante ou puérpera tem doença neurológica\nsim; não\n\n\npneumopati\nSe gestante ou puérpera tem outra pneumopatia crônica\nsim; não\n\n\nimunodepre\nSe gestante ou puérpera tem imunodeficiência ou imunodepressão (diminuição da função do sistema imunológico)\nsim; não\n\n\nrenal\nSe gestante ou puérpera tem doença renal crônica\nsim; não\n\n\nobesidade\nSe gestante ou puérpera tem obesidade\nsim; não\n\n\nuti\nSe gestante ou puérpera foi internada na UTI\nsim; não\n\n\nsuport_ven\nSe gestante ou puérpera precisou de ventilação mecânica; se sim, se foi invasiva ou não\nnão; sim, não invasivo; sim, invasivo\n\n\nevolucao\nEvolução do caso da gestante ou puérpera\ncura; óbito\n\n\nvariante\nVariante do vírus SARS-CoV-2 (vírus do COVID-19)\noriginal; delta; gama; omicron"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "intro.html#base-de-dados",
    "href": "intro.html#base-de-dados",
    "title": "1  Introdução",
    "section": "1.1 Base de dados",
    "text": "1.1 Base de dados\nOs dados que consideramos nas aplicações deste livro são baseados em gestantes e puérperas de 10 a 55 anos hospitalizadas com Síndrome Respiratória Aguda Grave (SRAG) por COVID-19, confirmada por teste de PCR, no período de março de 2020 a dezembro de 2021, disponíveis no Sistema de Informação da Vigilância Epidemiológica da Gripe (SIVEP-Gripe), sistema oficial para o registro dos casos e óbitos por SRAG disponibilizado pelo Ministério da Saúde.\nNa base dados_covid estão contidas 11.485 observações e 50 variáveis. Assim, são as características observadas:\n\n\n\n\n\n\n\nVariável\nDescrição\n\n\n\n\nsem_pri\nSemana epidemiológia dos primeiros sintomas.\n\n\nidade_anos\nIdade, em anos, da gestante ou puérpera.\n\n\nsg_uf\nSigla da Unidade Federativa de residência da gestante ou puérpera.\n\n\nid_mn_resi\nMunicípio de residência da gestante ou puérpera.\n\n\nco_mun_res\nCódigo do município de residência da gestante ou puérpera.\n\n\nco_mu_inte\nCódigo do município onde está localizado a Unidade de Saúde onde a gestante ou puérpera internou.\n\n\ndt_sin_pri\nData de primeiros sintomas do caso.\n\n\ndt_evoluca_2\nData da alta ou do óbito da gestante ou puérpera.\n\n\nano\nAno da infecção pelo COVID-19.\n\n\nclassi_gesta_puerp\nIdade gestacional da gestante e puerpério.\n\n\nraca\nRaça da gestante ou puérpera.\n\n\nescol\nNível de escolaridade da gestante ou puérpera.\n\n\nmudou_muni\nSe gestante ou puérpera precisou se deslocar para outro município para realizar atendimento.\n\n\nzona\nTipo de zona de residência da gestante ou puérpera.\n\n\nfaixa_et\nFaixa etária da gestante ou puérpera.\n\n\nhospital\nSe gestante ou puérpera foi hospitalizada.\n\n\nhist_viagem\nSe gestante ou puérpera fez viagem internacional até 14 dias antes do início dos sintomas.\n\n\nsg_para_srag\nSe o caso é proveniente de síndrome gripal (SG) que evoluiu para síndrome respiratória aguda grave (SRAG).\n\n\ninf_inter\nSe trata-se de caso nosocomial (infecção adquirida no hospital).\n\n\ncont_ave_suino\nSe a gestante ou puérpera trabalha ou tem contato direto com aves, suínos ou outros animais.\n\n\nvacina\nSe a gestante ou puérpera recebeu vacina contra influenza.\n\n\nvacina_cov\nSe a gestante ou puérpera recebeu vacina contra COVID-19.\n\n\nantiviral\nSe gestante ou puérpera usou antiviral para gripe e qual antiviral.\n\n\nfebre\nSe gestante ou puérpera manifestou sintoma de febre.\n\n\ntosse\nSe gestante ou puérpera manifestou sintoma de tosse.\n\n\ngarganta\nSe gestante ou puérpera manifestou sintoma de dor de garganta.\n\n\ndispneia\nSe gestante ou puérpera manifestou sintoma de dispneia.\n\n\ndesc_resp\nSe gestante ou puérpera manifestou sintoma de desconforto respiratório.\n\n\nsaturacao\nSe gestante ou puérpera manifestou sintoma de saturação.\n\n\ndiarreia\nSe gestante ou puérpera manifestou sintoma de diarreia.\n\n\nvomito\nSe gestante ou puérpera manifestou sintoma de vômito.\n\n\ndor_abd\nSe gestante ou puérpera manifestou sintoma de dor abdominal.\n\n\nfadiga\nSe gestante ou puérpera manifestou sintoma de fadiga.\n\n\nperd_olft\nSe gestante ou puérpera manifestou sintoma de perda de olfato.\n\n\nperd_pala\nSe gestante ou puérpera manifestou sintoma de perda de paladar.\n\n\ncardiopati\nSe gestante ou puérpera tem doença cardiovascular crônica.\n\n\nhematologi\nSe gestante ou puérpera tem doença hematológica crônica.\n\n\nhepatica\nSe gestante ou puérpera tem doença hepática crônica.\n\n\nasma\nSe gestante ou puérpera tem asma.\n\n\ndiabetes\nSe gestante ou puérpera tem diabetes mellitus.\n\n\nneuro\nSe gestante ou puérpera tem doença neurológica.\n\n\npneumopati\nSe gestante ou puérpera tem outra pneumopatia crônica.\n\n\nimunodepre\nSe gestante ou puérpera tem imunodeficiência ou imunodepressão (diminuição da função do sistema imunológico).\n\n\nrenal\nSe gestante ou puérpera tem doença renal crônica.\n\n\nobesidade\nSe gestante ou puérpera tem obesidade.\n\n\nuti\nSe gestante ou puérpera foi internada na UTI.\n\n\nsuport_ven\nSe gestante ou puérpera precisou de ventilação mecânica; se sim, se foi invasiva ou não.\n\n\nevolucao\nEvolução do caso da gestante ou puérpera.\n\n\nvariante\nVariante do vírus SARS-CoV-2 (vírus do COVID-19)."
  },
  {
    "objectID": "tutorialr.html#sobre-o-software-r",
    "href": "tutorialr.html#sobre-o-software-r",
    "title": "Appendix A — Tutorial de R",
    "section": "A.1 Sobre o software R",
    "text": "A.1 Sobre o software R\nR é um ambiente computacional e uma linguagem de programação para manipulação, análise e visualização de dados. É considerado um dos melhores ambiente computacional para essa finalidade. O R é mantido pela R Development Core Team e está disponível para diferentes sistemas operacionais: Linux, Mac e Windows.\nO software é livre, ou seja, gratuito, com código aberto em uma linguagem acessível. Nele, estão implementadas muitas metodologias estatísticas. Muitas dessas fazem parte do ambiente base de R e outras acompanham o ambiente sob a forma de pacotes, o que torna o R altamente expansível. Os pacotes são bibliotecas com dados e funções para diferentes áreas do conhecimento relacionados à estatística e áreas afins, devidamente documentados.\nO R possui uma comunidade extremamente ativa, engajada desde o aprimoramento de ferramentas e desenvolvimento de novas bibliotecas, até o suporte aos usuários. Sobre o desenvolvimento de novas bibliotecas, um pesquisador em Estatística que desenvolve um novo modelo estatístico pode disponibilizá-lo em um pacote acessível a que se interessam pelo modelo.\nAlém disso, a disponibilidade e compartilhamento da pesquisa em um pacote no R é uma boa prática quando falamos de reprodutibilidade na Ciência. Ainda nesse ponto, realizar as análises de uma pesquisa aplicada em um programa livre e acessível a todos é um dos principais pontos para permitir reprodutibilidade.\nAo optar por programar em R também implica na escolha de uma IDE (Integrated Development Environment) que, na grande maioria dos casos, será o RStudio. O RStudio é um conjunto de ferramentas integradas projetadas para editar e executar os códigos em R. Assim, quando for o interesse utilizar o R, só precisa abrir o RStudio (R é automaticamente carregado).\nPara instalação do R e do RStudio, veja a Seção que segue."
  },
  {
    "objectID": "instalar.html#instalação-r",
    "href": "instalar.html#instalação-r",
    "title": "3  Instalação R e RStudio",
    "section": "3.1 Instalação R",
    "text": "3.1 Instalação R\nNessa Seção, vamos apresentar como instalar o R e o RStudio para os três sistemas operacionais: Windows, MAC e Linux, respectivamente.\n\n3.1.1 Para Windows\nOs passos para instalar o R quando o sistema operacional é Windows são os seguintes:\n\nEntre neste link para acessar a página do R e clique em Download, como no link destacado em retângulo vermelho na Figura @ref(fig:windows1). Note que o 3.6.1 é o número da versão mais recente disponível no momento da construção desse material (5/7/19).\n\n\n\n\n\n\nDownload R para Windows\n\n\n\n\n\nSalve o arquivo de instalação em algum caminho de interesse do seu computador. Por exemplo, na Figura @ref(fig:windows2) mostra que a pasta é “Downloads”.\n\n\n\n\n\n\nInstalador\n\n\n\n\n\nClique duas vezes com o botão esquerdo no instalador para iniciar a instalação. O próximo passo é escolher a língua para instalação. Na Figura @ref(fig:windows3) abaixo é português.\n\n\n\n\n\n\nEscolha da lingua para instalação\n\n\n\n\n\nClique em “Próximo” nas próximas janelas, como nas Figuras @ref(fig:windows4) a @ref(fig:windows9).\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\nPronto, agora o software R será instalado, como na Figura @ref(fig:windows10). Quando terminar, aparecerá uma janela como apresentado na Figura @ref(fig:windows11).\n\n\n\n\n\n\nInstalação do R\n\n\n\n\n\n\n\n\n\nPronto: R instalado\n\n\n\n\n\n\n3.1.2 Para MAC\nOs passos para instalar o R quando o sistema operacional é OS X (Mac) são os seguintes:\n\nEntre no site e clique em Download R for (MAC) OS X, conforme destacado abaixo em retângulo vermelho na Figura @ref(fig:mac1).\n\n\n\n\n\n\n Download R para Mac\n\n\n\n\n\nBaixe o pacote R-3.6.1.pkg clicando no link indicado no retângulo vermelho na Figura @ref(fig:mac2). Note que o 3.6.1 é o número da versão mais recente disponível no momento da confecção deste material.\n\n\n\n\n\n\n Download R para Mac\n\n\n\n\n\nCaso você não tenha configurado a pasta de descargas, o pacote será baixado na pasta “Downloads”, como mostrado na seguinte Figura @ref(fig:mac3). Observe que dois arquivos são baixados, clique duas vezes no arquivo “R-3.6.1.pkg” para abrir o assistente de instalação que o guiará durante o processo.\n\n\n\n\n\n\n Pasta para instalação\n\n\n\n\n\nAcompanhe os passos indicados pelo instalador (Figura @ref(fig:mac4)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nDeve concordar com os termos da licença, clique em “Agree” (Figura @ref(fig:mac5)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nSelecione o lugar onde instalará o programa, no caso de ter o disco particionado e assim desejar instalar em uma parte específica. Caso contrário, continue (Figura @ref(fig:mac6) e @ref(fig:mac7)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPara finalizar a instalação, o assistente lhe pedirá nome de usuário e senha do seu notebook, como apresentado na Figura @ref(fig:mac8).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPronto, agora o software R será instalado, como na Figura @ref(fig:mac9). Quando terminar, aparecerá uma janela como apresentado na Figura @ref(fig:mac10).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n3.1.3 Para Linux\nA instalação do R no Linux depende da distribuição utilizada. Entre neste link para acessar a página do R e clique em Download R for Linux, como no link destacado em retângulo vermelho na Figura @ref(fig:linux1). Em seguida, clique no link referente à distribuição utilizada (Figura @ref(fig:linux2)).\n\n\n\n\n\nDownload em Linux\n\n\n\n\n\n\n\n\n\nDownload em Linux"
  },
  {
    "objectID": "instalar.html",
    "href": "instalar.html",
    "title": "Appendix B — Instalação R",
    "section": "",
    "text": "Nessa Seção, vamos apresentar como instalar o R e o RStudio para os três sistemas operacionais: Windows, MAC e Linux, respectivamente.\n\nB.0.1 Para Windows\nOs passos para instalar o R quando o sistema operacional é Windows são os seguintes:\n\nEntre neste link para acessar a página do R e clique em Download, como no link destacado em retângulo vermelho na Figura @ref(fig:windows1). Note que o 3.6.1 é o número da versão mais recente disponível no momento da construção desse material (5/7/19).\n\n\n\n\n\n\nDownload R para Windows\n\n\n\n\n\nSalve o arquivo de instalação em algum caminho de interesse do seu computador. Por exemplo, na Figura @ref(fig:windows2) mostra que a pasta é “Downloads”.\n\n\n\n\n\n\nInstalador\n\n\n\n\n\nClique duas vezes com o botão esquerdo no instalador para iniciar a instalação. O próximo passo é escolher a língua para instalação. Na Figura @ref(fig:windows3) abaixo é português.\n\n\n\n\n\n\nEscolha da lingua para instalação\n\n\n\n\n\nClique em “Próximo” nas próximas janelas, como nas Figuras @ref(fig:windows4) a @ref(fig:windows9).\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\nPronto, agora o software R será instalado, como na Figura @ref(fig:windows10). Quando terminar, aparecerá uma janela como apresentado na Figura @ref(fig:windows11).\n\n\n\n\n\n\nInstalação do R\n\n\n\n\n\n\n\n\n\nPronto: R instalado\n\n\n\n\n\n\nB.0.2 Para MAC\nOs passos para instalar o R quando o sistema operacional é OS X (Mac) são os seguintes:\n\nEntre no site e clique em Download R for (MAC) OS X, conforme destacado abaixo em retângulo vermelho na Figura @ref(fig:mac1).\n\n\n\n\n\n\n Download R para Mac\n\n\n\n\n\nBaixe o pacote R-3.6.1.pkg clicando no link indicado no retângulo vermelho na Figura @ref(fig:mac2). Note que o 3.6.1 é o número da versão mais recente disponível no momento da confecção deste material.\n\n\n\n\n\n\n Download R para Mac\n\n\n\n\n\nCaso você não tenha configurado a pasta de descargas, o pacote será baixado na pasta “Downloads”, como mostrado na seguinte Figura @ref(fig:mac3). Observe que dois arquivos são baixados, clique duas vezes no arquivo “R-3.6.1.pkg” para abrir o assistente de instalação que o guiará durante o processo.\n\n\n\n\n\n\n Pasta para instalação\n\n\n\n\n\nAcompanhe os passos indicados pelo instalador (Figura @ref(fig:mac4)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nDeve concordar com os termos da licença, clique em “Agree” (Figura @ref(fig:mac5)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nSelecione o lugar onde instalará o programa, no caso de ter o disco particionado e assim desejar instalar em uma parte específica. Caso contrário, continue (Figura @ref(fig:mac6) e @ref(fig:mac7)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPara finalizar a instalação, o assistente lhe pedirá nome de usuário e senha do seu notebook, como apresentado na Figura @ref(fig:mac8).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPronto, agora o software R será instalado, como na Figura @ref(fig:mac9). Quando terminar, aparecerá uma janela como apresentado na Figura @ref(fig:mac10).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\nB.0.3 Para Linux\nA instalação do R no Linux depende da distribuição utilizada. Entre neste link para acessar a página do R e clique em Download R for Linux, como no link destacado em retângulo vermelho na Figura @ref(fig:linux1). Em seguida, clique no link referente à distribuição utilizada (Figura @ref(fig:linux2)).\n\n\n\n\n\nDownload em Linux\n\n\n\n\n\n\n\n\n\nDownload em Linux"
  },
  {
    "objectID": "instalarstudio.html",
    "href": "instalarstudio.html",
    "title": "Appendix C — Instalação RStudio",
    "section": "",
    "text": "O RStudio é um conjunto de ferramentas integradas projetadas (IDE - Integrated Development Environment) da linguagem R para auxiliar na produtividade ao utilizar o R.\n\nC.0.1 Para Windows\n\nEntre neste link e clique em Download como em destaque na Figura @ref(fig:rswindows1).\n\n\n\n\n\n\nSite para download do RStudio\n\n\n\n\n\nClique no instalador em destaque na Figura @ref(fig:rswindows2).\n\n\n\n\n\n\nLink para download do RStudio\n\n\n\n\n\nAo clicar no link, será feito o download do instalador e salvo na pasta de interesse. No caso da Figura @ref(fig:rswindows3), o instalador está na pasta Downloads. Dê dois cliques no botão esquerdo no arquivo para iniciar o download do arquivo.\n\n\n\n\n\n\n Instalador\n\n\n\n\n\nClique em “Próximo” nas próximas janelas e na última “Instalar”, como nas Figuras @ref(fig:rswindows4) a @ref(fig:rswindows6).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPronto, a instalação será iniciada, como na Figura @ref(fig:rswindows7).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\nC.0.2 Para MAC\n\nEntre neste link e clique em Download como em destaque na Figura @ref(fig:rsmac1).\n\n\n\n\n\n\nSite para download do RStudio\n\n\n\n\n\nClique no instalador como destacado na Figura @ref(fig:rsmac2).\n\n\n\n\n\n\nSite para download do RStudio para Mac\n\n\n\n\n\nAo clicar no link, será feito o download do instalador e salvo na pasta de interesse. Caso você não tenha configurado a pasta de descargas, o instalador ficará na pasta “Downloads”, como na Figura @ref(fig:rsmac3).\n\n\n\n\n\n\n Instalador salvo em pasta\n\n\n\n\n\nClicando duas vezes no arquivo “RStudio-1.2.1335.dmg” (versãos mais atual do RStudio), será feita a descarga do mesmo abrindo a janela conforme na Figura @ref(fig:rsmac4). Clique no aplicativo de RStudio destacado em vermelho também na Figura @ref(fig:rsmac4).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nO instalador pode perguntar se está seguro que o aplicativo será baixado da internet e clique em “Open” (Figura @ref(fig:rsmac5)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPronto! Imediatamente abre o RStudio, como na Figura @ref(fig:rsmac6), e você já pode utilizá-lo.\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\nC.0.3 Para Linux\n\nEntre neste link e clique em Download como em destaque na Figura @ref(fig:rslinux1).\n\n\n\n\n\n\nSite para download do RStudio\n\n\n\n\n\nClique no link referente à distribuição utilizada (Figura @ref(fig:rslinux2)).\n\n\n\n\n\n\n Download do RStudio"
  },
  {
    "objectID": "comecando_rstudio.html",
    "href": "comecando_rstudio.html",
    "title": "Appendix D — Primeiros passos no RStudio",
    "section": "",
    "text": "O RStudio é um conjunto de ferramentas integradas projetadas (IDE - Integrated Development Environment) da linguagem R para editar e executar os códigos em R.\nTem quatro áreas, conforme a Figura @ref(fig:telarstudio1).\n\n\n\n\n\n Visualização do RStudio\n\n\n\n\nA seguir descrevemos melhor os painéis e abas do RStudio:\n\nEditor/Scripts: é onde escrever os códigos. Arquivos do tipo .R.\nConsole: executar os comandos e ver os resultados.\nEnviroment: painel com todos os objetos criados.\nHistory: história dos comandos executados.\nFiles: navegar em pastas e arquivos.\nPlots: onde os gráficos serão apresentados.\nPackages: pacotes instalados (sem ticar) e habilitados (ticados).\nHelp: retorna o tutorial de ajuda do comando solicitado com help() ou ?comando. Ver melhor como pedir ajuda no R no final deste capítulo.\n\nO usuário pode alterar a aparência do RStudio, como fonte e cor. Como exemplo, as Figuras @ref(fig:telarstudio2) e @ref(fig:telarstudio3) apresentam os passos para mudar o tema do script. No exemplo, deixar com fundo preto.\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\nAinda no menu Tools –> Global Options –> Pane Layout, o usuário pode organizar a ordem dos quadrantes do RStudio, como apresentado nas Figuras @ref(fig:telarstudio4), @ref(fig:telarstudio5) e @ref(fig:telarstudio6). No exemplo, o painel Console foi transferido para o lado do painel Script, o que facilita a visualização dos comandos rodados.\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\n\nD.0.1 Projetos\nUma funcionalidade importante é a criação de projetos, permitindo dividir o trabalho em múltiplos ambientes, cada um com o seu diretório, documentos e workspace.\nPara criar um projeto, os seguintes passos podem ser seguidos:\n\nClique na opção “File” do menu, e então em “New Project”.\nClique em “New Directory”.\nClique em “New Project”.\nEscreva o nome do diretório (pasta) onde deseja manter seu projeto, exemplo: “my_project”.\nClique no botão “Create Project”.\n\nPara criar um novo script para escrever os códigos, vá em File -> New File -> R Script\n\n\nD.0.2 Boas práticas\nComente bem o seu código: é possível fazer comentários usando o símbolo ‘#’. É sempre bom explicar o que uma variável armazena, o que uma função faz, por que alguns parâmetros são passados para uma determinada função, qual é o objetivo de um trecho de código etc.\nEvite linhas de código muito longas: usar linhas de código mais curtas ajuda na leitura do código.\nEscreva um código organizado. Por exemplo, adote um padrão no uso de minúsculas e maiúsculas, uma lógica única na organização de pastas e arquivos, pode ser adotada uma breve descrição (como comentário) indicando o que um determinado script faz.\nCarregue todos os pacotes que irá usar sempre no início do arquivo: quando alguém abrir o seu código será fácil identificar quais são os pacotes que devem ser instalados e quais dependências podem existir."
  },
  {
    "objectID": "comecando_r.html#como-obter-ajuda-no-r",
    "href": "comecando_r.html#como-obter-ajuda-no-r",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.13 Como obter ajuda no R",
    "text": "E.13 Como obter ajuda no R\nListamos aqui 3 maneiras para buscar ajuda no R:\n\nHelp/documentação do R (comandos help(nome_da_funcao) ou ?nome_da_funcao). Como exemplo,\n\n\nhelp(mean) #ou\n?mean\n\n\nGoogle Na Figura @ref(fig:help) está o exemplo de busca de ajuda no Google. Repare no ‘r’ no início da busca, isso pode ajudar.\n\n\n\n\n\n\nPesquisa no Google\n\n\n\n\n\nComunidade O Stack Overflow e o Stack Overflow em Português são sites de Pergunta e Resposta amplamente utilizados por todas as linguagens de programação, e o R é uma delas."
  },
  {
    "objectID": "comecando_r.html#pacotes",
    "href": "comecando_r.html#pacotes",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.14 Pacotes",
    "text": "E.14 Pacotes\nComo dito quando falamos “Sobre o R”, o R apresenta funções na sua base e também em forma de pacotes (conjunto de funções bem documentado), que precisam ser instalados (uma vez no seu computador) e carregados na sessão de utilização do R (carregado em toda sessão aberta).\nDificilmente você vai fazer uma análise apenas com as funções básicas do R e dificilmente não vai existir um pacote com as funções que você precisa. Por esse motivo, falamos a seguir em como instalar e carregar pacotes.\n\nE.14.1 Instalação de pacotes\n\nVia CRAN:\n\n\ninstall.packages(\"nome-do-pacote\")\n\nExemplo: Instalação do pacote dplyr.\n\ninstall.packages(\"dplyr\")\n\nNote que o nome do pacote está entre aspas.\n\nVia Github: Para instalar via Github, precisa primeiramente instalar o pacote devtools.\n\n\ndevtools::install_github(\"nome-do-repo/nome-do-pacote\")\n\nExemplo:\n\ndevtools::install_github(\"tidyverse/dplyr\")\n\n\n\nE.14.2 Carregar pacotes\nUma vez que um pacote de interesse está instalado em sua máquina, para carregá-lo na sessão atual do R é só rodar a seguinte linha de comando:\n\nlibrary(nome-do-pacote)\n\nVeja que para carregar o pacote não se usa aspas.\nComo exemplo, o carregamento do pacote dplyr:\n\nlibrary(dplyr)\n\nSó é necessário instalar o pacote uma vez, mas é necessário carregá-lo toda vez que começar uma nova sessão.\nDado que o pacote está carregado ao rodar a função library(), todas as funções desse pacote podem ser usadas sem problemas.\nCaso você não queira carregar o pacote e apenas usar uma função específica do pacote, você pode usar nome-do-pacote::nome-da-funcao. Por exemplo:\n\ndplyr::distinct(...)\n\nSe você tivesse carregado o pacote dplyr anteriormente (pela função library()), não seria necessário colocar dplyr:: antes da função distinct do pacote."
  },
  {
    "objectID": "comecando_r.html#materiais-complementares",
    "href": "comecando_r.html#materiais-complementares",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.15 Materiais complementares",
    "text": "E.15 Materiais complementares\n\nCritical Thinking in Clinical Research. Felipe Fregni & Ben M. W. Illigens. 2018.\nSites:\n\nhttps://www.bmj.com/about-bmj/resources-readers/publications/statistics-square-one/1-data-display-and-summary\nhttp://www.sthda.com/english/wiki/statistical-tests-and-assumptions\n\nCHAPTER 3: Selecting the Study Population. In: Critical Thinking in Clinical Research by Felipe Fregni and Ben Illigens. Oxford University Press 2018.\nFandino W. Formulating a good research question: Pearls and pitfalls. Indian J Anaesth. 2019;63(8):611–616. doi:10.4103/ija.IJA_198_19\nRiva JJ, Malik KM, Burnie SJ, Endicott AR, Busse JW. What is your research question? An introduction to the PICOT format for clinicians. J Can Chiropr Assoc. 2012;56(3):167–171.\nExternal validity, generalizability, and knowledge utilization. Ferguson L1. J Nurs Scholarsh. 2004;36(1):16-22.\nPeter M Rothwell; Commentary: External validity of results of randomized trials: disentangling a complex concept, International Journal of Epidemiology, Volume 39, Issue 1, 1 February 2010, Pages 94–96, https://doi.org/10.1093/ije/dyp305"
  },
  {
    "objectID": "comecando_r.html#r-como-calculadora",
    "href": "comecando_r.html#r-como-calculadora",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.1 R como calculadora",
    "text": "E.1 R como calculadora\n\nOperadores\n\n\n#adição\n10+15\n\n[1] 25\n\n#subtração\n10-2\n\n[1] 8\n\n#multiplicação\n2*10\n\n[1] 20\n\n#divisão\n30/2\n\n[1] 15\n\n#raiz quadrada\nsqrt(4)\n\n[1] 2\n\n#potência\n2^2\n\n[1] 4\n\n\nSe você digitar um comando incompleto, como 10 *, o R mostrará um +. Isso não tem a ver com a soma e apenas que o R está esperando você completar seu comando. Termine seu comando ou aperte Esc para recomeçar.\nVale também ressaltar que se você digitar um comando que o R não reconhece, ele retornará uma mensagem de erro e você pode digitar outro comando normalmente em seguida."
  },
  {
    "objectID": "comecando_r.html#atribuição",
    "href": "comecando_r.html#atribuição",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.2 Atribuição",
    "text": "E.2 Atribuição\nPodemos salvar valores dentro de um objeto, que é simplemente um nome que guarda um valor, vetor, matriz, lista ou base de dados.\nPara atribuir a um objeto, o sinal de atribuição é = ou <- (preferível).\nExemplos:\n\nx <- 10/2\nx\n\n[1] 5\n\nX\n\nError in eval(expr, envir, enclos): object 'X' not found\n\n\nPor que tivemos um erro acima?\nO R é case sensitive, isto é, faz a diferenciação entre as letras minúsculas e maiúsculas. Portanto, x é diferente de X."
  },
  {
    "objectID": "comecando_r.html#objetos-em-r",
    "href": "comecando_r.html#objetos-em-r",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.3 Objetos em R",
    "text": "E.3 Objetos em R\nExistem cinco classes básicas no R:\n\ncharacter: “UAH!”\nnumeric: 0.95 (números reais)\ninteger: 100515 (inteiros)\ncomplex: 2 + 5i (números complexos, a + bi)\nlogical: TRUE (booleanos, TRUE/FALSE)\n\nVamos atribuir a x a string banana.\n\nx <- banana \n\nError in eval(expr, envir, enclos): object 'banana' not found\n\nx <- \"banana\"\nx\n\n[1] \"banana\"\n\n\nO primeiro caso (x <- banana) não deu certo, pois ele entendeu que estamos atribuindo a x outro objeto banana, que não foi declarado. Para atribuir o string banana a x, precisamos colocar entre aspas ou aspas simples. Uma string sem aspas é entendido como um objeto, veja abaixo:\n\nbanana <- 30\nx <- banana\nx\n\n[1] 30\n\n\nPara saber a classe de um objeto, use a função class().\n\ny <- \"ola\"\nclass(y)\n\n[1] \"character\"\n\nx <- 2.5\nclass(x)\n\n[1] \"numeric\"\n\n\n\nE.3.1 Apagar objetos\nE se eu quiser apagar um objeto?\n\nx <- 20\nx\n\n[1] 20\n\nremove(x)\nx\n\nError in eval(expr, envir, enclos): object 'x' not found\n\n\nE se eu quiser limpar o console - apaga todos os objetos atribuídos até aqui:\n\nrm(list=ls())"
  },
  {
    "objectID": "comecando_r.html#vetores",
    "href": "comecando_r.html#vetores",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.4 Vetores",
    "text": "E.4 Vetores\nComo atribuir vários valores a um objeto? Para entrar com vários números (ou nomes, ou qualquer outro grupo de coisas), precisamos usar uma função para dizer ao programa que os valores serão combinados em um único vetor.\n\nx <- c(2,3,4)\nx\n\n[1] 2 3 4\n\ny <- seq(1,10)\ny\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nz <- rep(1,10)\nz\n\n [1] 1 1 1 1 1 1 1 1 1 1\n\na <- 1:10\na\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nbicho <-c(\"macaco\",\"pato\",\"galinha\",\"porco\")\nbicho\n\n[1] \"macaco\"  \"pato\"    \"galinha\" \"porco\"  \n\n\nE se quisermos visualizar o conteúdo da posição 2 no vetor bicho?\n\nbicho[2]\n\n[1] \"pato\"\n\n\nAs operações vetoriais podem ser realizadas de maneira bastante intuitiva. Como exemplos:\n\nx <- c(2,3,4)\nx\n\n[1] 2 3 4\n\nops <- x-1\nops\n\n[1] 1 2 3\n\nk <- x*2\nk\n\n[1] 4 6 8\n\n\nVamos agora considerar um vetor de pesos em kg e altura em metros de 6 pessoas.\n\npeso <- c(62, 70, 52, 98, 90, 70)\npeso\n\n[1] 62 70 52 98 90 70\n\naltura <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)\naltura\n\n[1] 1.70 1.82 1.75 1.94 1.84 1.61\n\n\nVale mencionar que o separador de decimais no R é . (ponto)!\nComo calcularia o IMC? Lembrando que o IMC é dado pelo peso (em kg) dividido pela altura (em metros) ao quadrado.\n\nimc <- peso/(altura^2)\nimc\n\n[1] 21.45329 21.13271 16.97959 26.03890 26.58318 27.00513\n\n\nPara saber o tamanho do vetor, use a função length().\n\nlength(imc)\n\n[1] 6"
  },
  {
    "objectID": "comecando_r.html#matrizes",
    "href": "comecando_r.html#matrizes",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.5 Matrizes",
    "text": "E.5 Matrizes\nMatrizes são vetores numéricos com duas dimensões, que são simplesmente a linha e a coluna às quais o elemento pertence.\n\nx <- matrix(seq(1,16), nrow=4,ncol=4)\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n\nNote que os números de 1 a 16 foram dispostos na matriz coluna por coluna ou seja, preenchendo de cima para baixo e depois da esquerda para a direita.\nComo sei qual elemento está na segunda linha e terceira coluna da matriz x?\n\nx[2,3]\n\n[1] 10\n\nx[3,  ]   # seleciona a 3ª linha\n\n[1]  3  7 11 15\n\nx[ , 2]   # seleciona a 2ª coluna\n\n[1] 5 6 7 8\n\nx[1, 2]   # seleciona o elemento da primeira linha e segunda coluna\n\n[1] 5\n\n\nE se eu quiser substituir a primeira linha por (13,15,19,30)?\n\nx[1,] <- c(13,15,19,30)\n\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]   13   15   19   30\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n\nSeja o vetor d:\n\nd <- c(128,124,213,234)\n\nE se quisermos substituir a terceira coluna por d?\n\nx[,3] <- d\n\nQual a dimensão da matriz x?\nVimos que para vetor usamos o comando length(). Serve para matriz também? Vamos testar!\n\nlength(x)\n\n[1] 16\n\n\nNote que retorna o número de colunas vezes o número de linhas (4*4=16). Mas o que quero saber é o numero de linhas e de colunas. Para isso, o comando é dim().\n\ndim(x)\n\n[1] 4 4\n\n\nPara concatenar linhas em uma matriz, podemos usar o comando rbind():\n\nvet <- c(2,20,12,34)\nx2 <- rbind(x,vet)\nx2\n\n    [,1] [,2] [,3] [,4]\n      13   15  128   30\n       2    6  124   14\n       3    7  213   15\n       4    8  234   16\nvet    2   20   12   34\n\n\nPara concatenar colunas em uma matriz, podemos usar o comando cbind():\n\nv2 <- c(25,10,15,4) \nx3 <- cbind(x,v2)\nx3\n\n                  v2\n[1,] 13 15 128 30 25\n[2,]  2  6 124 14 10\n[3,]  3  7 213 15 15\n[4,]  4  8 234 16  4"
  },
  {
    "objectID": "comecando_r.html#fatores",
    "href": "comecando_r.html#fatores",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.6 Fatores",
    "text": "E.6 Fatores\nFatores podem ser vistos como vetores de inteiros que possuem rótulos (labels). Eles são úteis para representar uma variável categórica (nominal e ordinal).\n\nsexo <- c(\"M\", \"H\", \"H\", \"H\", \"M\", \"M\", \"H\")\nsex <- as.factor(sexo)\nsex\n\n[1] M H H H M M H\nLevels: H M\n\nlevels(sex)\n\n[1] \"H\" \"M\""
  },
  {
    "objectID": "comecando_r.html#data-frame",
    "href": "comecando_r.html#data-frame",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.7 Data frame",
    "text": "E.7 Data frame\nTrata-se de uma “tabela de dados” onde as colunas são as variáveis e as linhas são os registros. Essas colunas podem ser de classes diferentes.\nEssa é a grande diferença entre data.frame’s e matrizes (matriz é só numerica).\nPosso criar um data frame no R com os vetores, por exemplo:\n\nID <- seq(1,6)\npes <- c(62, 70, 52, 98, 90, 70)\nalt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)\nimc <- pes/(alt^2)\ndados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)\ndados\n\n  ID peso altura      imc\n1  1   62   1.70 21.45329\n2  2   70   1.82 21.13271\n3  3   52   1.75 16.97959\n4  4   98   1.94 26.03890\n5  5   90   1.84 26.58318\n6  6   70   1.61 27.00513\n\n\nPosso pensar que o data frame tem a mesma ideia de matriz. Quero olhar os dados de altura, que sei que está na coluna 3.\n\ndados[,3]\n\n[1] 1.70 1.82 1.75 1.94 1.84 1.61\n\n\nMas existe uma maneira mais fácil de selecionar a variável de interesse sem ter que saber em qual coluna ela está.\nPor ser um data frame, posso usar $ da seguinte maneira:\n\ndados$altura\n\n[1] 1.70 1.82 1.75 1.94 1.84 1.61\n\n\nPutz, esqueci de colocar a variável de grupo no data frame. Tenho que criar tudo de novo? Não:\n\ngr <- c(rep(1,3),rep(2,3))\ndados$grupo <- gr\n\ndados\n\n  ID peso altura      imc grupo\n1  1   62   1.70 21.45329     1\n2  2   70   1.82 21.13271     1\n3  3   52   1.75 16.97959     1\n4  4   98   1.94 26.03890     2\n5  5   90   1.84 26.58318     2\n6  6   70   1.61 27.00513     2\n\n\nVeja que no “dados$grupo” foi inserido o objeto “gr”. Se “gr” não tivesse o mesmo número de linhas do data frame retornaria um erro.\nFunções úteis para data.frame:\nAinda não falamos com muito detalhes sobre funções no R, faremos isso mais adiante. Mas por enquanto, considere que sejam nomes já salvos no R e que, ao colocar o objeto da base de dados (no nosso exemplo é dados) dentro dos parênteses, retorna algumas informações úteis sobre a base de dados. São algumas delas:\n\nhead() - Mostra as primeiras 6 linhas.\ntail() - Mostra as últimas 6 linhas.\ndim() - Número de linhas e de colunas.\nnames() - Os nomes das colunas (variáveis).\nstr() - Estrutura do data.frame. Mostra, entre outras coisas, as classes de cada coluna.\n\n\nhead(dados)\n\n  ID peso altura      imc grupo\n1  1   62   1.70 21.45329     1\n2  2   70   1.82 21.13271     1\n3  3   52   1.75 16.97959     1\n4  4   98   1.94 26.03890     2\n5  5   90   1.84 26.58318     2\n6  6   70   1.61 27.00513     2\n\ndim(dados)\n\n[1] 6 5\n\nnames(dados)\n\n[1] \"ID\"     \"peso\"   \"altura\" \"imc\"    \"grupo\" \n\nstr(dados)\n\n'data.frame':   6 obs. of  5 variables:\n $ ID    : int  1 2 3 4 5 6\n $ peso  : num  62 70 52 98 90 70\n $ altura: num  1.7 1.82 1.75 1.94 1.84 1.61\n $ imc   : num  21.5 21.1 17 26 26.6 ...\n $ grupo : num  1 1 1 2 2 2"
  },
  {
    "objectID": "comecando_r.html#operadores-lógicos",
    "href": "comecando_r.html#operadores-lógicos",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.8 Operadores lógicos",
    "text": "E.8 Operadores lógicos\nA operação lógica nada mais é do que um teste que retorna verdadeiro (TRUE) ou falso (FALSE). Esses dois valores recebem uma classe especial: logical.\n\nIgual a: ==\n\nVamos testar se um valor é igual ao outro.\nExemplo:\n\n10==11\n\n[1] FALSE\n\n11==11\n\n[1] TRUE\n\n\nNo primeiro retornou FALSE, pois realmente 10 não é igual a 11 e no segundo caso acima retornou TRUE, pois realmente 11 é igual a 11.\nDe maneira análoga funciona para os operadores abaixo:\n\nDiferente de: !=\n\nExemplo:\n\n10!=11\n\n[1] TRUE\n\n\n\nMaior que: >\nMaior ou igual: >=\nMenor que: <\nMenor ou igual: <=\n\nExemplos:\n\n10>5\n\n[1] TRUE\n\n10>=10\n\n[1] TRUE\n\n4<4\n\n[1] FALSE\n\n4<=4\n\n[1] TRUE\n\n\n\nUm outro operador muito útil é o %in%. Com ele, podemos verificar se um valor está dentro de um vetor.\n\n\nex <- 1:15\n3 %in% ex\n\n[1] TRUE\n\n\n\nE: & - será verdadeiro se os dois forem TRUE.\n\n\nx <- 15\nx > 10 & x < 30\n\n[1] TRUE\n\nx < 10 & x < 30\n\n[1] FALSE\n\n\n\nOU: | - será verdadeiro se um dos dois forem TRUE.\n\n\nx <- 15\nx > 10 | x < 30\n\n[1] TRUE\n\nx < 10 | x < 30\n\n[1] TRUE\n\n\n\nNegação: !\n\n\nx <- 15\n!x<30\n\n[1] FALSE"
  },
  {
    "objectID": "comecando_r.html#dados-faltantes-infinitos-e-indefinições-matemáticas",
    "href": "comecando_r.html#dados-faltantes-infinitos-e-indefinições-matemáticas",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.9 Dados faltantes, infinitos e indefinições matemáticas",
    "text": "E.9 Dados faltantes, infinitos e indefinições matemáticas\n\nNA (Not Available): dado faltante/indisponível. Exemplo:\n\n\nx <- c(1,6,9)\nx[4]\n\n[1] NA\n\n\nRetornou NA porque não há elemento na posição 4 do vetor x.\n\nNaN (Not a Number): indefinições matemáticas. Como 0/0 e log(-1). Exemplo:\n\n\nlog(-10)\n\n[1] NaN\n\n\n\nInf (Infinito): número muito grande ou o limite matemático. Aceita sinal negativo (-Inf). Exemplo:\n\n\n10^14321\n\n[1] Inf"
  },
  {
    "objectID": "comecando_r.html#condicionamento-if-e-else",
    "href": "comecando_r.html#condicionamento-if-e-else",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.10 Condicionamento: If e else",
    "text": "E.10 Condicionamento: If e else\nAs estruturas if e else servem para executar um código apenas se uma condição (teste lógico) for satisfeita.\n\na <- 224\nb <- 225\nif (a==b) { \n  v <- 10\n} else {\n  v <- 15\n  }\nv\n\n[1] 15\n\n\nVeja que o R só executa o conteúdo das chaves {} se a expressão dentro dos parênteses () retornar TRUE.\nNote que a condição de igualdade é representada por dois iguais (==). Como dito anteriormente, apenas um igual (=) é símbolo de atribuição (preferível <-).\nVeja outro exemplo:\n\na <- 224\nb <- 225\nif (a==b) { \n  v <- 10\n} else if (a > b) {\n  v <- 15\n  } else {\n    v <- 25\n    }\nv\n\n[1] 25\n\n\nVeja que nesse exemplo gostaria de usar mais de duas condições, e por isso usamos a estrutura intermediária else if."
  },
  {
    "objectID": "comecando_r.html#iterador-for",
    "href": "comecando_r.html#iterador-for",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.11 Iterador for",
    "text": "E.11 Iterador for\nO for serve para repetir uma mesma tarefa para um conjunto de valores diferentes. Cada repetição é chamada de iteração.\nComo exemplo, considere o vetor atribuído ao objeto m como segue:\n\nm <- c(1,20,50,60,100)\n\nQuero criar um novo vetor, p digamos, que seja formado por cada elemento de m dividido por sua posição.\n\np <- NULL\nfor (i in 1: length(m)){\n  p[i] <- m[i]/i\n}\np\n\n[1]  1.00000 10.00000 16.66667 15.00000 20.00000\n\n\nNote que primeiro definimos o objeto p, recebendo NULL. O NULL representa a ausência de um objeto e serve para já declarar algum objeto que receberá valor na sequência. No caso, ao rodar o for, o p é um vetor de tamanho 5 (tamanho do vetor m).\nNo exemplo, temos 5 iterações e para cada valor de i, correndo de 1 até 5 (tamanho de m), pegamos o valor de m na posição i e dividimos por sua posição. Assim, formamos o vetor p."
  },
  {
    "objectID": "comecando_r.html#funções",
    "href": "comecando_r.html#funções",
    "title": "Appendix E — Primeiros passos no R",
    "section": "E.12 Funções",
    "text": "E.12 Funções\nFunções no R são nomes que guardam um código de R. A ideia é que sempre que rodar a função com os seus argumentos, o código que ela guarda será executado e o resultado será retornado.\nJá usamos anteriormente algumas funções que estão na base do R. Por exemplo, quando usamos class() para entender a classe do objeto que o R está entendendo. Colocamos um argumento dentro do parênteses e o R retornou qual a classe do objeto em questão. Relembre o que falamos ao perguntar ao R qual a classe do vetor oi criado:\n\noi <- c(10,20,2,1,0.5)\nclass(oi)\n\n[1] \"numeric\"\n\n\nAgora vamos conversar sobre outra função já criada e disponibilizada na base do R: mean. Essa função retorna a média do vetor que está em seu argumento. Vamos calcular a média dos valores do vetor oi:\n\nmean(oi)\n\n[1] 6.7\n\n\nConsidere que, por algum motivo, tenha no vetor oi uma observação faltante. No R, dado faltante é caracterizado por NA.\n\noi <- c(10,20,2,1,0.5,NA)\n\nPerceba que, apesar de NA ser um texto, não coloquei entre aspas porque quero falar para o R que naquela posição não tem valor e o R entende isso ao ler NA (sem aspas). Se colocar entre aspas, ele entenderá como sendo um texto e não mais como valor faltante.\n\nmean(oi)\n\n[1] NA\n\n\nComo não sabemos o valor do elemento na posição 6 do vetor oi, o R não teria como calcular a média de todos os 6 valores e por isso devolve NA. No entanto, queremos calcular a média dos elementos de oi ao retirar os valores faltantes, ou seja, queremos fazer: (10+20+2+1+0.5)/5. Então devemos falar para o R o que queremos, e para isso podemos utilizar o argumento na.rm = TRUE:\n\nmean(oi,na.rm = TRUE)\n\n[1] 6.7\n\n\nImportantes:\n\nSe a função tiver mais de um argumento, eles são sempre separados por vírgulas;\nCada função tem os seus próprios argumentos. Para saber quais são e como usar os argumentos de uma função, basta acessar a sua documentação. Uma forma de fazer isso é pela função help, cujo argumento é o nome da função que precisa de ajuda:\n\n\nhelp(mean)\n\nVeja que abrirá a documentação sobre a função mean no menu “Help” do RStudio, e lá é possível ver os argumentos e exemplos de uso da função em questão.\nAinda sobre funções já presentes no R, vamos considerar agora a função sample. Veja a documentação dessa função para ver o que ela faz:\n\nhelp(sample)\n\nA função sample retorna uma amostra de um vetor com tamanho especificado em um de seus argumentos com ou sem reposição. Ela apresenta quatro argumentos: sample(x, size, replace = FALSE, prob = NULL), em que: x é o vetor do qual será amostrado o número de elementos especificado no argumento size, seja com ou sem reposição (argumento replace) e com dadas probabilidades de seleção, especificadas em prob.\nQuero usar essa função para amostrar do objeto oi (x=oi) dois elementos (size=2) em uma seleção com reposição (replace = TRUE) e que a probabilidade de seleção seja a mesma para todos os elementos do vetor oi. No caso da probabilidade, como podemos ver na documentação da função sample, o default (padrão se o usuário não mudar o argumento) é ser a mesma probabilidade de seleção para todos os elementos. Assim, se o usuário nada especificar para esse argumento, o R entenderá o seu default. O mesmo vale para o argumento replace: caso fosse o interesse fazer a seleção sem reposição, não precisaríamos colocar esse argumento porque seu default é FALSE.\n\n\n\n\nsample(x=oi,size=2,replace=TRUE) #não colocamos argumento prob porque vamos usar o seu default (probs iguais).\n\n[1] 20 20\n\n\nTambém poderíamos usar a mesma função sem colocar o nome dos argumentos:\n\nsample(oi,2,TRUE) \n\n[1] 20 10\n\n\nMas, nesse caso, é importante que se respeite a ordem dos argumentos: o vetor tem que ser o primeiro, o segundo argumento é size e assim por diante.\nVale ressaltar que as duas últimas saídas não necessariamente serão as mesmas, porque é feito um sorteio aleatório de dois elementos de oi em cada uma delas.\nAlém de usar funções já prontas, podemos criar novas funções. Suponha que queremos criar uma função de dois argumentos que retorna o primeiro mais três vezes o segundo argumento. Criamos a função no que segue:\n\nf_conta <- function(x,y) {\n  out <- x+3*y\n  return(out)\n}\n\nA função acima tem:\n\no nome: f_conta;\nos argumentos: x e y;\no corpo out: <- x+3*y; e\no que retorna: return(out).\n\nSuponha que eu queira fazer a conta 10+3*20. Podemos fazer isso ao chamar a função criada f_conta.\n\nf_conta(x=10,y=20)\n\n[1] 70\n\n\nVeja que o cálculo acima retorna exatamente o mesmo que o seguinte:\n\nf_conta(y=20,x=10)\n\n[1] 70\n\n\nIsso acontece porque mudei a ordem dos argumentos, mas acompanhado com os nomes dos argumentos. Se eu não quiser colocar os nomes dos argumentos, precisa tomar cuidado para não errar a ordem deles. Pois:\n\nf_conta(10,20)\n\n[1] 70\n\n\né diferente de\n\nf_conta(20,10)\n\n[1] 50"
  },
  {
    "objectID": "tutorialr.html",
    "href": "tutorialr.html",
    "title": "Tutorial de R",
    "section": "",
    "text": "R é um ambiente computacional e uma linguagem de programação para manipulação, análise e visualização de dados. É considerado um dos melhores ambiente computacional para essa finalidade. O R é mantido pela R Development Core Team e está disponível para diferentes sistemas operacionais: Linux, Mac e Windows.\nO software é livre, ou seja, gratuito, com código aberto em uma linguagem acessível. Nele, estão implementadas muitas metodologias estatísticas. Muitas dessas fazem parte do ambiente base de R e outras acompanham o ambiente sob a forma de pacotes, o que torna o R altamente expansível. Os pacotes são bibliotecas com dados e funções para diferentes áreas do conhecimento relacionados à estatística e áreas afins, devidamente documentados.\nO R possui uma comunidade extremamente ativa, engajada desde o aprimoramento de ferramentas e desenvolvimento de novas bibliotecas, até o suporte aos usuários. Sobre o desenvolvimento de novas bibliotecas, um pesquisador em Estatística que desenvolve um novo modelo estatístico pode disponibilizá-lo em um pacote acessível a que se interessam pelo modelo.\nAlém disso, a disponibilidade e compartilhamento da pesquisa em um pacote no R é uma boa prática quando falamos de reprodutibilidade na Ciência. Ainda nesse ponto, realizar as análises de uma pesquisa aplicada em um programa livre e acessível a todos é um dos principais pontos para permitir reprodutibilidade.\nAo optar por programar em R também implica na escolha de uma IDE (Integrated Development Environment) que, na grande maioria dos casos, será o RStudio. O RStudio é um conjunto de ferramentas integradas projetadas para editar e executar os códigos em R. Assim, quando for o interesse utilizar o R, só precisa abrir o RStudio (R é automaticamente carregado).\nPara instalação do R e do RStudio, veja a Seção que segue."
  },
  {
    "objectID": "intro.html#bases-de-dados",
    "href": "intro.html#bases-de-dados",
    "title": "1  Introdução",
    "section": "1.1 Bases de dados",
    "text": "1.1 Bases de dados\nOs dados considerados nas aplicações deste livro são provenientes do Sistema de Informação da Vigilância Epidemiológica da Gripe (SIVEP-Gripe), sistema oficial para o registro dos casos e óbitos por Síndrome Respiratória Aguda Grave (SRAG) disponibilizado pelo Ministério da Saúde. Os dados correspondem a registros de gestantes e puérperas de 10 a 55 anos hospitalizadas com SRAG por COVID-19 confirmada por teste de PCR. O conjunto de dados é utilizado para ilustrar e demonstrar diversos aspectos dos conceitos abordados no texto, e pode ser baixado em https://github.com/observatorioobstetrico/dados_livro_cd_saude.\n\n1.1.1 Dados de COVID-19 em gestantes e puérperas\nEssa base consiste em 11.523 registros de gestantes e puérperas diagnosticadas com COVID-19 no período de março de 2020 a dezembro de 2021. Alguns estudos conduzidos pelo OOBr usaram esses dados, dentre os quais podem ser citados: Características demográficas e epidemiológicas sobre mulheres grávidas e puérperas que morreram de Síndrome Respiratória Aguda Grave no Brasil, Mortalidade materna associada à COVID-19 no Brasil em 2020 e 2021: comparação com mulheres não grávidas e homens e Desfechos da COVID-19 em puérperas, gestantes e mulheres não gestantes e nem puérperas hospitalizadas.\nO dicionários das variáveis a ser considerado neste livro está na Tabela 1.1.\n\n\nTabela 1.1: Dicionário das variáveis da base de dados de COVID-19 em gestantes e puérperas.\n\n\n\n\n\n\n\nVariável\nDescrição\nValores\n\n\n\n\nDT_NOTIFIC\nData de preenchimento da ficha de notificação\nDia/Mês/Ano\n\n\nDT_SIN_PRI\nData de primeiros sintomas do caso\nDia/Mês/Ano\n\n\nDT_NASC\nData de nascimento da gestante ou puérpera\nDia/Mês/Ano\n\n\nDT_INTERNA\nData em que gestante ou puérpera foi hospitalizada\nDia/Mês/Ano\n\n\nSEM_PRI\nSemana epidemiológica do início dos sintomas\n1 a 52\n\n\nCS_RACA\nRaça da gestante ou puérpera\n1- branca; 2- preta; 3- amarela; 4- parda; 5-indígena; 9- ignorado\n\n\nCS_ESCOL_N\nNível de escolaridade da gestante ou puérpera\n0- sem escolaridade (analfabeto); 1- fundamental 1° ciclo (1ª a 5ª série); 2- fundamental 2 (6ª a 9ª série); 3- medio (1° ao 3° ano); 4- superior; 5- não se aplica; 9- ignorado\n\n\nidade\nIdade, em anos, da gestante ou puérpera\n10 a 55\n\n\nCS_GESTANT\nMomento gestacional ou puerpério\n1- 1° trimestre; 2- 2° trimestre; 3- 3° trimestre; 4- idade gestacional ignorada; 5- não; 9- ignorado\n\n\nPUERPERA\nSe paciente é puérpera ou parturiente (mulher que pariu recentemente - até 45 dias do parto)\n1- sim; 2- não; 9- ignorado\n\n\nSG_UF\nSigla do estado de residência da gestante ou puérpera\nSigla padronizada pelo IBGE\n\n\nID_MN_RESI\nNome do município de residência da gestante ou puérpera\nNomes padronizados pelo IBGE\n\n\nCO_MUN_RES\nCódigo do município de residência da gestante ou puérpera\nCódigo definido pelo IBGE\n\n\nCS_ZONA\nTipo de zona de residência da gestante ou puérpera\n1- urbana; 2- rural; 3- periurbana; 9- ignorado\n\n\nFEBRE\nSe gestante ou puérpera manifestou sintoma de febre\n1- sim; 2- não; 9- ignorado\n\n\nTOSSE\nSe gestante ou puérpera manifestou sintoma de tosse\n1- sim; 2- não; 9- ignorado\n\n\nGARGANTA\nSe gestante ou puérpera manifestou sintoma de dor de garganta\n1- sim; 2- não; 9- ignorado\n\n\nDISPNEIA\nSe gestante ou puérpera manifestou sintoma de dispneia\n1- sim; 2- não; 9- ignorado\n\n\nDESC_RESP\nSe gestante ou puérpera manifestou sintoma de desconforto respiratório\n1- sim; 2- não; 9- ignorado\n\n\nSATURACAO\nSe gestante ou puérpera manifestou sintoma de saturação\n1- sim; 2- não; 9- ignorado\n\n\nDIARREIA\nSe gestante ou puérpera manifestou sintoma de diarreia\n1- sim; 2- não; 9- ignorado\n\n\nVOMITO\nSe gestante ou puérpera manifestou sintoma de vômito\n1- sim; 2- não; 9- ignorado\n\n\nDOR_ABD\nSe gestante ou puérpera manifestou sintoma de dor abdominal\n1- sim; 2- não; 9- ignorado\n\n\nFADIGA\nSe gestante ou puérpera manifestou sintoma de fadiga\n1- sim; 2- não; 9- ignorado\n\n\nPERD_OLFT\nSe gestante ou puérpera manifestou sintoma de perda de olfato\n1- sim; 2- não; 9- ignorado\n\n\nPERD_PALA\nSe gestante ou puérpera manifestou sintoma de perda de paladar\n1- sim; 2- não; 9- ignorado\n\n\nASMA\nSe gestante ou puérpera tem asma\n1- sim; 2- não; 9- ignorado\n\n\nDIABETES\nSe gestante ou puérpera tem diabetes mellitus\n1- sim; 2- não; 9- ignorado\n\n\nNEUROLOGIC\nSe gestante ou puérpera tem doença neurológica\n1- sim; 2- não; 9- ignorado\n\n\nPNEUMOPATI\nSe gestante ou puérpera tem outra pneumopatia crônica\n1- sim; 2- não; 9- ignorado\n\n\nIMUNODEPRE\nSe gestante ou puérpera tem imunodeficiência ou imunodepressão (diminuição da função do sistema imunológico)\n1- sim; 2- não; 9- ignorado\n\n\nRENAL\nSe gestante ou puérpera tem doença renal crônica\n1- sim; 2- não; 9- ignorado\n\n\nOBESIDADE\nSe gestante ou puérpera tem obesidade\n1- sim; 2- não; 9- ignorado\n\n\nCARDIOPATI\nSe gestante ou puérpera tem doença cardiovascular crônica\n1- sim; 2- não; 9- ignorado\n\n\nHEMATOLOGI\nSe gestante ou puérpera tem doença hematológica crônica\n1- sim; 2- não; 9- ignorado\n\n\nHEPATICA\nSe gestante ou puérpera tem doença hepática crônica\n1- sim; 2- não; 9- ignorado\n\n\nVACINA_COV\nSe gestante ou puérpera recebeu vacina COVID-19\n1- sim; 2- não; 9- ignorado\n\n\nDOSE_1_COV\nData em que gestante ou puérpera recebeu a 1ª dose da vacina COVID-19\nDia/Mês/Ano\n\n\nDOSE_2_COV\nData em que gestante ou puérpera recebeu a 2ª dose da vacina COVID-19\nDia/Mês/Ano\n\n\nFAB_COV_1\nFabricante da vacina que a gestante ou puérpera recebeu na 1ª dose\n\n\n\nFAB_COV_2\nFabricante da vacina que a gestante ou puérpera recebeu na 2ª dose\n\n\n\nSUPORT_VEN\nSe gestante ou puérpera precisou de ventilação mecânica; se sim, se foi invasiva ou não\n1- sim, invasivo; 2- sim, não invasivo; 3- não; 9- ignorado\n\n\nUTI\nSe gestante ou puérpera foi internada na UTI\n1- sim; 2- não; 9- ignorado\n\n\nDT_ENTUTI\nData de entrada da gestante ou puérpera na UTI\nDia/Mês/Ano\n\n\nDT_SAIDUTI\nData de saída da gestante ou puérpera na UTI\nDia/Mês/Ano\n\n\nEVOLUCAO\nEvolução do caso da gestante ou puérpera\n1- cura; 2- óbito; 3- óbito por outras causas; 9- ignorado"
  },
  {
    "objectID": "tabulacao.html#variáveis",
    "href": "tabulacao.html#variáveis",
    "title": "3  Tabulação de dados",
    "section": "3.1 Variáveis",
    "text": "3.1 Variáveis\nOs objetos apresentados, ou variáveis, podem ser denotados como o armazenamento de informações sobre a característica de interesse a respeito de cada unidade amostral, variáveis socioeconômicas como raça, renda e escolaridade são um ótimo exemplo. As variáveis podem ser divididas em dois tipos:\n\nVariáveis Qualitativas: cujos valores podem ser separados por categorias não numéricas. Sendo chamadas de variáveis qualitativas ordinais quando há presença de uma ordenação entre as categorias (Ex.: Escolaridade), e variáveis qualitativas nominais caso contrário (Ex.: Raça, Sexo)\nVariáveis Quantitativas: onde os valores são expressos em números resultantes de uma contagem ou mensuração. Podendo ser quantitativas discretas, quando resultam de um conjunto finito ou enumerável de possíveis valores (Ex.: Número de vitórias ou de filhos), ou ainda variáveis quantitativas continuas quando assumem valores em uma escala continua (Ex.: Peso, Altura).\n\nObserve as 10 unidades amostrais para as variáveis da base de dados COVID-19 para melhor compreensão, onde a idade representa variável quantitativa discreta, a raça represeta qualitativa nominal e a escolaridade é relativa a qualitativa ordinal.\n\n\n\n\n\n\nidade_anos\nraca\nescol\n\n\n\n\n5\n39\nparda\nsuperior\n\n\n6\n34\nbranca\nsuperior\n\n\n8\n29\nbranca\nmedio\n\n\n11\n28\nbranca\nmedio\n\n\n13\n37\nparda\nfund2\n\n\n16\n27\nbranca\nmedio\n\n\n17\n44\nbranca\nmedio\n\n\n23\n31\nbranca\nmedio\n\n\n24\n33\namarela\nmedio\n\n\n25\n25\nparda\nmedio\n\n\n\n\n\nPodemos olhar uma variável por outra perspectiva, assumindo um outro tipo de classificação. Isso pode soar um pouco estranho a princípio, mas olher o exemplo a seguir para melhor compreensão, considere a variável idade, podemos transformar em faixas de idade para classificação em criança, jovem, adulto e idoso. Observe:\n\n#criacao da variavel classificacao\nclassificacao <- idade_anos |>\n  lapply(function(x) ifelse(x < 12, 'crianca',\n                            ifelse(x < 25, 'jovem',\n                                   ifelse( x < 60 ,'adulto','idoso'))))\n#tabela concatenando idade e classificacao\nclassificacao |> \n  unlist() |> \n  cbind(idade_anos) |> \n  head(10) |> knitr::kable()\n\n\n\n\n\nidade_anos\n\n\n\n\njovem\n24\n\n\nadulto\n31\n\n\nadulto\n27\n\n\njovem\n20\n\n\nadulto\n39\n\n\nadulto\n34\n\n\nadulto\n34\n\n\nadulto\n29\n\n\nadulto\n44\n\n\nadulto\n27\n\n\n\n\n\nAgora, temos uma variável categórica ordinal."
  },
  {
    "objectID": "tabulacao.html#como-tabular",
    "href": "tabulacao.html#como-tabular",
    "title": "3  Tabulação de dados",
    "section": "3.2 Como tabular",
    "text": "3.2 Como tabular\nÉ perceptível, até mesmo quando trabalhamos com DataFrames e matrizes, a forma proposta de visualização e armazenamento dessas variáveis. Por colunas onde cada coluna representa uma das características (no nosso exemplo, idade, raça e escolaridade).\nFazemos isso de forma a facilitar nossa análise, sendo cada linha um indíviduo e, cada uma das observações dentro dessa linha, suas características.\nAssim como discutido, podemos obter nossas bases de dados de diversas fontes, como planilhas excel, arquivos .csv, bases SQL, ou até mesmo criá-las no nosso próprio R script com a função data.frame() como já apresentado. Por ser mais intuitivo e mais utilizado no dia a dia, vamos tomar o excel para exemplificar todo o processo. Você irá notar que o processo é realizado de forma bem simples.\n\n\n\n\n\nTabulação das variáveis no excel\n\n\n\n\nCada uma das células receberá um valor x referente a alguma característica indicada pela coluna e um indivíduo representado pela linha, em nosso caso temos 3 características para cada uma das 4 observações."
  },
  {
    "objectID": "tabulacao.html#alguns-problemas-no-meio-do-caminho",
    "href": "tabulacao.html#alguns-problemas-no-meio-do-caminho",
    "title": "3  Tabulação de dados",
    "section": "3.3 Alguns problemas no meio do caminho",
    "text": "3.3 Alguns problemas no meio do caminho\nÉ valido ressaltar que é possível se deparar com alguns problemas que talvez possam vir a ser solucionados da maneira errada.\nA forma como tabulamos nossos dados pode vir a ser um facilitar ou empecilho em nossas análises, um belo exemplo é a forma citada anteriormente de classificação dos dados ou transformação para que sejam salvos em alguma outra categoria, como faixa etária ou idade.\nOutro problema é quando trabalhamos com dados que possas vir a ter mais de uma resposta. Por exemplo: Quais sintomas estava sentindo? O melhor a se fazer nesse caso é criar uma coluna para cada um dos possíveis sintomas.\n\n\n\n\n\nMais de uma opção de escolha na variável\n\n\n\n\nUma outra forma seria:\n\n\n\n\n\nMais de uma opção de escolha na variável, outra forma\n\n\n\n\nDevemos lembrar sempre de anexar um ID ou forma de identificação única para cada uma das observações. É possível criar uma ou trabalhar com alguma já existente, um exemplo de uma já existente é o próprio CPF ou RG quando trabalhamos com pessoas.\nVale ressaltar outras boas práticas ao realizar a tabulação:\n\nSe trabalhando com Excel ou Softwares parecidos, deixe a planilha apenas com a tabela de dados, evite armazenar na mesma planilha várias informações avulssas que não façam parte da sua tabela;\nNo R conseguimos especificar qual planilha de um arquivo .xlsx queremos transferir, porém pode vir a ser um pouco confuso as vezes, então é sugerido deixar todas as suas informações em uma única tabela em uma única planilha;\nPadronização é extremamente importante, salve todos os dados para cada coluna em apenas um determinado formato (Ex.: Coluna Idade - Integer, Coluna Raça - Character), lembrando sempre de manter um padrão de medida (cm, L), variáveis do tipo categórico tambem precisam de padronização (Evite coisas como: Não, nao, n, N, não);\nCuidado ao classificar dados faltantes, uma prática errada é preencher esses dados com 0, isso pode vir a atrapalhar toda sua análise\nFoi citado CPF como forma de identificação, mas pode haver casos em que teremos mais de uma linha contendo um mesmo indivíduo dependendo do nosso tipo de dados. Ou seja, esteja atento para que não haja duplicidade de variável identificadora ou ID."
  },
  {
    "objectID": "manipulacao_dados.html",
    "href": "manipulacao_dados.html",
    "title": "2  Manipulação de dados",
    "section": "",
    "text": "Neste capítulo falaremos alguns princípios básicos sobre manipulação de dados. Iremos trabalhar em um cenário mais próximo da realidade possível, ou seja, iremos trabalhar em cima de uma base de dados real. O objetivo é manipular a base e torná-la pronta para ser usada nos capítulos seguintes. Será mostrado desde como importar a base até como criar novas variáveis que poderão ser utilizadas em análises. Não será possível cobrir todo o ramo de manipulação em um só capítulo, mas iremos trabalhar com o máximo de ferramentas possíveis. Pacotes ou funções que não forem utilizadas aqui, mas que são interessantes serão mencionados ao longo do capítulo junto a links que contenham explicações de como utilizá-las. Vale ressaltar que estamos em um cenário mais básico e introdutório. Vamos começar.\n\n2.0.1 Importação de dados\nUm dos caminhos mais simples para importar dados no R é utilizando a função read.table(). Está função é simples pois ja vem instalada com o R, faz parte do pacote base utils, e importa arquivos nos formatos cvs e txt.\nA utilização do pacote é bem simples, não preciso carregá-lo na memória usando library().\n\ndados1 <- read.table(file = \"dados.csv\", sep = \";\")\ndados2 <- read.table(file = \"caminho-para-o-arquivo/dados.csv\", sep = \";\")\n\nObserve que na função temos os argumentos file e sep. O file indica o nome do arquivo que será importado e sep indica qual o símbolo separador de colunas, que neste caso é a virgula. Note também que usamos dois exemplos, o primeiro considera que o seu arquivo está no diretório de trabalho (quando criamos o projeto e colocamos os arquivos de dados na pasta criada pelo projeto), não sendo necessário especificar o caminho até do arquivo. O outro exemplo mostra como especificar o local do seu arquivo. A função possui mais argumentos que você pode explorar usando o help, mas no geral, esses dois são os mais utilizados.\n\n2.0.1.1 Extensão .txt ou .csv\nCaso esteja trabalhando com arquivos do tipo cvs ou txt o pacote readr irá servir muito bem. As funções deste pacote são bem rapidas e algumas delas são focadas em tranformar arquivos simples em data.frame. Aglumas funções do pacote são\n\nread_cvs(): para arquivos delimitados por vírgulas.\nread_cvs2(): para arquivos delimitados por ponto e vírgula.\nread_tsv(): para arquivos delimitados por tabulações.\nread_delim(): para aquivos com qualquer delimitador.\nread_fwf(): para arquivos compactos que devem ter a largura de cada coluna especificada.\nread_table(): para arquivos de texto tabulas com colunas separas por espaço.\n\nCaso esta seja a primeira vez que você ira utilizar este pacote, será necessário instalá-lo em seu computar. Você pode fazer isso utilizando a função install.packages(\"readr\") e é claro, antes de usar qualquer pacote que não faça parte do R base, você deve carregá-lo. Como exemplo, consideramos um arquivo chamado dados1 que queremos importar para o R.\n\nlibrary(readr)\ndados_csv <- read_csv(file = \"caminho-para-o-arquivo/dados1.csv\")\ndados_txt <- read_delim(file = \"caminho-para-o-arquivo/dados1.txt\", delim = \" \")\n\nApesar dos argumentos deste pacote serem semelhantes aos da função read.table(), devemos nos atentar a algumas diferenças. Aqui é o argumento delim que indica qual o separador das colunas no arquivo texto.\nVale ressaltar que para cada função read_, existe umas respectiva função write_ para exportar o arquivo no formato de interesse. Como exemplo, queremos salvar a base de dados mtcars na pasta do meu computador com o nome cars:\n\nwrite_csv(x = mtcars, path = \"cars.csv\")\nwrite_delim(x = mtcars, delim = \" \", path = \"cars.txt\")\n\n\n\n2.0.1.2 Arquivos em Excel\nArquivos em formato xlsx são muito utilizados, porém o R não possui uma função nativa para importar este tipo de arquivo. Existem diversos pacotes para importar dados neste e formato e os principais são redxl, xlsx, XLConnect e tydixl. Apesar destes pacotes terem objetivos semelhantes, cada um tem suas peculiaridades, então aconselhamos estudar cada um desses pacotes e assim decidir qual melhor atende às suas necessidades. Aqui vamos mostrar apenas o pacote readxl, pois é um dos mais facéis e diretos de se utilizar. Este pacote serve para importar e ler planilhas do Excel nos formatos xlsx ou xls. A seguir estão listadas algumas funções para importação e leitura de dados:\n\nread_excel(): esta função detecta automaticamente a extensão do arquivo, e importa arquivos do tipo xsl e xlsx.\nread_xsl(): importa arquivos no formato xsl.\nread_xlsx(): importa arquivos no formato xlsx.\n\nNovamente, é necessário à instalação e carregamento do pacote caso não o tenha em seu computador. Para exemplicar consideramos um arquivo chamado dados2 que queremos importar para o R.\n\nlibrary(readxl)\ndados_excel1 <- read_excel(path = \"dados2.xls\")\ndados_excelx1 <- read_excel(path = \"dados2.xlsx\")\n\nPor meio da função read_excel conseguimos importar tanto um arquivo no formato xls quanto no formato xlsx.\nPodemos também exportar um arquivo em excel (.xls e .xlsx) ao considerar a função write_xlsx do pacote writexl. Suponha que temos o interesse em salvar a base de dados dados em excel na pasta do computador (exportar) com o nome de dados_correto:\n\nlibrary(writexl)\nwrite_xlsx(dados, \"dados_correto.xlsx\")\n\n\n\n\n2.0.2 Análise de consistência e tratamento de dados\nO tratamento dos dados toma muitas vezes a maior parte do tempo de uma análise estatística.\nA análise de consistência consiste em realizar uma primeira análise dos dados com o intuito de encontrar inconsistências. São exemplos de inconsistências:\n\nboas práticas para nome das variáveis.\ncomo erros de digitação;\nindivíduos imputados mais de uma vez na planilha de dados de maneira errada;\nidentificar casos missings e avaliar se a observação está ausente de maneira correta ou não;\nidentificar as categorias de variáveis qualitativas.\n\nA partir daqui iremos trabalhar com a nossa base de dados de COVID-19 em gestantes e puérperas.\nImportando os dados\nComo já aprendemos a importar os dados, vamos direto ao ponto. Nos dados estão no forma rds que não foi mencionado anteriormente, mas o pacote readr tem uma função para importar este tipo de arquivo.\n\ndados <- readr::read_rds(\"dados/dados_covid[SUJO].rds\")\nknitr::kable(head(dados))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDT_NOTIFIC\nDT_SIN_PRI\nDT_NASC\nDT_INTERNA\nSEM_PRI\nSG_UF\nID_MN_RESI\nCO_MUN_RES\nCS_ZONA\nCS_RACA\nCS_ESCOL_N\nidade\nCS_GESTANT\nPUERPERA\nFEBRE\nTOSSE\nGARGANTA\nDISPNEIA\nDESC_RESP\nSATURACAO\nDIARREIA\nVOMITO\nFADIGA\nPERD_OLFT\nPERD_PALA\nDOR_ABD\nCARDIOPATI\nHEMATOLOGI\nHEPATICA\nASMA\nDIABETES\nNEUROLOGIC\nPNEUMOPATI\nIMUNODEPRE\nRENAL\nOBESIDADE\nVACINA_COV\nDOSE_1_COV\nDOSE_2_COV\nFAB_COV_1\nFAB_COV_2\nDT_ENTUTI\nDT_SAIDUTI\nUTI\nSUPORT_VEN\nEVOLUCAO\n\n\n\n\n15/05/2020\n06/05/2020\n03/06/2003\n15/05/2020\n19\nCE\nMORRINHOS\n230890\nNA\n4\nNA\n16\n2\nNA\n1\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n2\n2\n1\n\n\n18/05/2020\n10/05/2020\n07/07/1996\n15/05/2020\n20\nPR\nCURITIBA\n410690\n1\n1\n2\n23\n2\n2\n2\n2\n2\n1\n2\n2\n1\n2\nNA\nNA\nNA\nNA\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nNA\nNA\nNA\nNA\nNA\n\n\n2\n3\n1\n\n\n30/04/2020\n20/04/2020\n26/03/1996\n24/04/2020\n17\nSP\nSAO CAETANO DO SUL\n354880\n1\n9\n9\n24\n9\n1\n1\n2\n2\n2\n2\n2\n2\n2\nNA\nNA\nNA\nNA\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nNA\nNA\nNA\nNA\nNA\n\n\n2\n3\n1\n\n\n11/05/2020\n04/05/2020\n02/06/1986\n09/05/2020\n19\nPA\nMARABA\n150420\n1\n4\n4\n33\n5\n1\n1\n1\n2\n2\n1\n2\n2\n2\nNA\nNA\nNA\nNA\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nNA\nNA\nNA\nNA\nNA\n\n\n2\n2\n1\n\n\n01/07/2020\n12/06/2020\n11/12/1996\n30/06/2020\n24\nDF\nSANTA MARIA\n530150\n1\n9\nNA\n23\n5\n1\n2\n2\n2\n2\n2\n2\n1\n2\nNA\n1\nNA\nNA\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nNA\nNA\nNA\nNA\nNA\n\n\n2\n3\n1\n\n\n09/06/2020\n09/06/2020\n09/12/1984\n09/06/2020\n24\nRO\nPORTO VELHO\n110020\n1\n4\n2\n35\n3\n2\n1\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\nNA\nNA\nNA\nNA\nNA\n\n\n2\n3\n1\n\n\n\n\n\n\n2.0.2.1 Tratamento da base de dados\nInicialmente, vamos verificar os nomes das variáveis na base de dados por meio da função names. Note que os nomes estão, de certa forma, padronizados. Todos maíusculos (com exceção de “idade”), separados por “_”. Este ainda não é o cenário ideal para trabalharmos, mas poderia ser pior, contendo maiúsculas, espaços e acentos. Utilizar os dados com essas características não impossibilita as futuras análises, mas pode atrapalhar quando precisamos selecionar algumas dessas variáveis.\n\nnames(dados)\n\n [1] \"DT_NOTIFIC\" \"DT_SIN_PRI\" \"DT_NASC\"    \"DT_INTERNA\" \"SEM_PRI\"   \n [6] \"SG_UF\"      \"ID_MN_RESI\" \"CO_MUN_RES\" \"CS_ZONA\"    \"CS_RACA\"   \n[11] \"CS_ESCOL_N\" \"idade\"      \"CS_GESTANT\" \"PUERPERA\"   \"FEBRE\"     \n[16] \"TOSSE\"      \"GARGANTA\"   \"DISPNEIA\"   \"DESC_RESP\"  \"SATURACAO\" \n[21] \"DIARREIA\"   \"VOMITO\"     \"FADIGA\"     \"PERD_OLFT\"  \"PERD_PALA\" \n[26] \"DOR_ABD\"    \"CARDIOPATI\" \"HEMATOLOGI\" \"HEPATICA\"   \"ASMA\"      \n[31] \"DIABETES\"   \"NEUROLOGIC\" \"PNEUMOPATI\" \"IMUNODEPRE\" \"RENAL\"     \n[36] \"OBESIDADE\"  \"VACINA_COV\" \"DOSE_1_COV\" \"DOSE_2_COV\" \"FAB_COV_1\" \n[41] \"FAB_COV_2\"  \"DT_ENTUTI\"  \"DT_SAIDUTI\" \"UTI\"        \"SUPORT_VEN\"\n[46] \"EVOLUCAO\"  \n\n\numa boa prática consiste em padronizar os nomes das variáveis, até para facilitar a lembrança deles. Para isso, utilizaremos o pacote janitor para a arrumação da base de dados. Usamos a função clean_names() para primeiro ajuste dos nomes das variáveis.\n\ndados <- janitor::clean_names(dados) \nnames(dados)\n\n [1] \"dt_notific\" \"dt_sin_pri\" \"dt_nasc\"    \"dt_interna\" \"sem_pri\"   \n [6] \"sg_uf\"      \"id_mn_resi\" \"co_mun_res\" \"cs_zona\"    \"cs_raca\"   \n[11] \"cs_escol_n\" \"idade\"      \"cs_gestant\" \"puerpera\"   \"febre\"     \n[16] \"tosse\"      \"garganta\"   \"dispneia\"   \"desc_resp\"  \"saturacao\" \n[21] \"diarreia\"   \"vomito\"     \"fadiga\"     \"perd_olft\"  \"perd_pala\" \n[26] \"dor_abd\"    \"cardiopati\" \"hematologi\" \"hepatica\"   \"asma\"      \n[31] \"diabetes\"   \"neurologic\" \"pneumopati\" \"imunodepre\" \"renal\"     \n[36] \"obesidade\"  \"vacina_cov\" \"dose_1_cov\" \"dose_2_cov\" \"fab_cov_1\" \n[41] \"fab_cov_2\"  \"dt_entuti\"  \"dt_saiduti\" \"uti\"        \"suport_ven\"\n[46] \"evolucao\"  \n\n\nVeja que ele deixou todos os nomes minúsculos. Neste caso não foi feito, mas a função substitui o espaço por “_” e tira acentos. Isso ajuda a evitar problemas futuros em algumas análises que não lidam muito bem com acentos e espaços nos nomes das variáveis.\nOutro problema comum é a presença de linhas e colunas vazias. Na base de dados em questão, não há linhas nem colunas em branco, como pode ser visto na saída abaixo.\n\njanitor::remove_empty(dados,\"rows\")\njanitor::remove_empty(dados,\"cols\")\n\n\n\n2.0.2.2 \nIdentificando casos duplicados\nOutra boa prática é identificar casos duplicados, isto é, identificar se há casos erroneamente repetidos. O ideal é utilizar variável chave do seu banco de dados, ou seja, aquela em que cada observação é única. Por exemplo, em uma base de dados de funcionários de uma empresa, uma variável chave poderia ser o CPF. Uma variável chave também pode ser a combinação de variáveis, gerando assim observações únicas. Para identificar casos duplicados, usamos a função get_dupes do pacote janitor. Em nosso banco de dados não tempos uma varíavel chave, então não vamos especificá-la na função, assim a função irá procurar observações repetidas considerando todas as variáveis, ou seja, linhas repetidas.\n\njanitor::get_dupes(dados)\n\nNo variable names specified - using all columns.\n\n\nNo duplicate combinations found of: dt_notific, dt_sin_pri, dt_nasc, dt_interna, sem_pri, sg_uf, id_mn_resi, co_mun_res, cs_zona, ... and 37 other variables\n\n\n [1] dt_notific dt_sin_pri dt_nasc    dt_interna sem_pri    sg_uf     \n [7] id_mn_resi co_mun_res cs_zona    cs_raca    cs_escol_n idade     \n[13] cs_gestant puerpera   febre      tosse      garganta   dispneia  \n[19] desc_resp  saturacao  diarreia   vomito     fadiga     perd_olft \n[25] perd_pala  dor_abd    cardiopati hematologi hepatica   asma      \n[31] diabetes   neurologic pneumopati imunodepre renal      obesidade \n[37] vacina_cov dose_1_cov dose_2_cov fab_cov_1  fab_cov_2  dt_entuti \n[43] dt_saiduti uti        suport_ven evolucao   dupe_count\n<0 rows> (or 0-length row.names)\n\n\nEm nosso caso, não temos casos duplicados. Caso tivesse, seria necessário remover as linhas duplicadas. Isto pode ser feito com o uso da função distinct do pacote dplyr.\n\n\n\n2.0.3 Identificar problemas nas variáveis da base de dados\nOutra etapa importante na análise de consistência é identificar o tipo de variável e ver se o R está interpretando corretamente o tipo de cada variável.\nTemos na nossa base de dados variáveis de data, além de variáveis qualitativas e quantitativas (veja o dicionário das variáveis na em: refenciar parte). Assim, precisamos entender se o R realmente entendeu todas as variáveis da maneira correta. Uma maneira de identificar isso e também de ver algumas descritivas das variáveis que nos auxiliam a ver possíveis inconsistências na base de dados é a a função glimpse do pacote dplyr. A função skim do pacote skimr também pode ajudar nisso.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nglimpse(dados)\n\nRows: 11,523\nColumns: 46\n$ dt_notific <chr> \"15/05/2020\", \"18/05/2020\", \"30/04/2020\", \"11/05/2020\", \"01…\n$ dt_sin_pri <chr> \"06/05/2020\", \"10/05/2020\", \"20/04/2020\", \"04/05/2020\", \"12…\n$ dt_nasc    <chr> \"03/06/2003\", \"07/07/1996\", \"26/03/1996\", \"02/06/1986\", \"11…\n$ dt_interna <chr> \"15/05/2020\", \"15/05/2020\", \"24/04/2020\", \"09/05/2020\", \"30…\n$ sem_pri    <int> 19, 20, 17, 19, 24, 24, 26, 27, 28, 24, 14, 29, 28, 10, 36,…\n$ sg_uf      <chr> \"CE\", \"PR\", \"SP\", \"PA\", \"DF\", \"RO\", \"PI\", \"RS\", \"PE\", \"MA\",…\n$ id_mn_resi <chr> \"MORRINHOS\", \"CURITIBA\", \"SAO CAETANO DO SUL\", \"MARABA\", \"S…\n$ co_mun_res <int> 230890, 410690, 354880, 150420, 530150, 110020, 221100, 431…\n$ cs_zona    <int> NA, 1, 1, 1, 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, NA, 1, 1, NA, 2…\n$ cs_raca    <int> 4, 1, 9, 4, 9, 4, 9, 1, 4, 9, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4,…\n$ cs_escol_n <int> NA, 2, 9, 4, NA, 2, 4, 2, NA, NA, NA, 9, 9, 3, 3, NA, 3, NA…\n$ idade      <dbl> 16, 23, 24, 33, 23, 35, 31, 17, 22, 29, 28, 22, 27, 25, 26,…\n$ cs_gestant <int> 2, 2, 9, 5, 5, 3, 1, 5, 3, 3, 4, 3, 5, 3, 3, 3, 3, 9, 3, 3,…\n$ puerpera   <int> NA, 2, 1, 1, 1, 2, NA, 1, NA, 1, NA, NA, 1, 2, 1, NA, NA, 1…\n$ febre      <int> 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, 1, 1, 1, 1, 1…\n$ tosse      <int> 1, 2, 2, 1, 2, 1, 1, 1, NA, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1…\n$ garganta   <int> NA, 2, 2, 2, 2, 2, 2, NA, 1, NA, 2, NA, 2, 1, 1, 2, 2, NA, …\n$ dispneia   <int> NA, 1, 2, 2, 2, 2, 2, 1, NA, NA, 1, NA, 2, 1, 2, 1, 1, NA, …\n$ desc_resp  <int> NA, 2, 2, 1, 2, 2, 1, 1, NA, 1, 1, NA, 2, 1, 2, 2, 1, NA, 1…\n$ saturacao  <int> NA, 2, 2, 2, 2, 2, 2, 1, NA, NA, 2, NA, 2, 2, 2, 1, 1, NA, …\n$ diarreia   <int> NA, 1, 2, 2, 1, 2, 2, 1, NA, NA, 2, NA, 2, 1, 2, 2, 2, NA, …\n$ vomito     <int> NA, 2, 2, 2, 2, 2, 2, 2, NA, NA, 2, NA, 2, 1, 2, 2, 2, NA, …\n$ fadiga     <int> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 2, 2, 2, …\n$ perd_olft  <int> NA, NA, NA, NA, 1, 2, NA, NA, NA, NA, 2, NA, NA, 1, 2, 1, 2…\n$ perd_pala  <int> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 1, 2, 2, …\n$ dor_abd    <int> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 2, 2, 2, …\n$ cardiopati <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 1, NA, NA, …\n$ hematologi <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ hepatica   <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ asma       <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ diabetes   <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ neurologic <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 1, NA, NA, …\n$ pneumopati <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ imunodepre <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ renal      <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ obesidade  <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ vacina_cov <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_1_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_2_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_1  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_2  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dt_entuti  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"30/06/2020\", \"\", \"12/07/2020\",…\n$ dt_saiduti <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"29/07/2020\", \"\", \"\", \"\", \"\", \"…\n$ uti        <int> 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, NA, 2…\n$ suport_ven <int> 2, 3, 3, 2, 3, 3, 9, 1, 3, 3, 3, 3, 3, 2, 3, 2, 1, 2, 3, 2,…\n$ evolucao   <int> 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, NA, 1, 1, 1, 1, 1, 1…\n\n\nNo R, as variáveis qualititativas são nomeadas “factor”, as variáveis quantitativas são nomeadas “numeric” e as variáveis de data são “date”. Note que na importação dos dados o R não entendeu corretamente os tipos de variáveis. Mas vamos corrigir isso no que segue.\nComeçando pela data, vamos rodar o seguinte código:\n\ndados$dt_notific  <- as.Date(dados$dt_notific, format = \"%d/%m/%Y\")\ndados$dt_sin_pri  <- as.Date(dados$dt_sin_pri, format = \"%d/%m/%Y\")\ndados$dt_nasc  <- as.Date(dados$dt_nasc, format = \"%d/%m/%Y\")\ndados$dt_interna  <- as.Date(dados$dt_interna, format = \"%d/%m/%Y\")\ndados$dt_entuti  <- as.Date(dados$dt_entuti, format = \"%d/%m/%Y\")\ndados$dt_saiduti  <- as.Date(dados$dt_saiduti, format = \"%d/%m/%Y\")\n\nA função as.Date informa para o R que a variável indicada é de data. O argumento format indica o formato que está a data, nesse caso, “dia/mês/ano”. Aqui é possível verificar todos os formatos de datas da função. Vamos ver como ficou:\n\nglimpse(dados)\n\nRows: 11,523\nColumns: 46\n$ dt_notific <date> 2020-05-15, 2020-05-18, 2020-04-30, 2020-05-11, 2020-07-01…\n$ dt_sin_pri <date> 2020-05-06, 2020-05-10, 2020-04-20, 2020-05-04, 2020-06-12…\n$ dt_nasc    <date> 2003-06-03, 1996-07-07, 1996-03-26, 1986-06-02, 1996-12-11…\n$ dt_interna <date> 2020-05-15, 2020-05-15, 2020-04-24, 2020-05-09, 2020-06-30…\n$ sem_pri    <int> 19, 20, 17, 19, 24, 24, 26, 27, 28, 24, 14, 29, 28, 10, 36,…\n$ sg_uf      <chr> \"CE\", \"PR\", \"SP\", \"PA\", \"DF\", \"RO\", \"PI\", \"RS\", \"PE\", \"MA\",…\n$ id_mn_resi <chr> \"MORRINHOS\", \"CURITIBA\", \"SAO CAETANO DO SUL\", \"MARABA\", \"S…\n$ co_mun_res <int> 230890, 410690, 354880, 150420, 530150, 110020, 221100, 431…\n$ cs_zona    <int> NA, 1, 1, 1, 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, NA, 1, 1, NA, 2…\n$ cs_raca    <int> 4, 1, 9, 4, 9, 4, 9, 1, 4, 9, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4,…\n$ cs_escol_n <int> NA, 2, 9, 4, NA, 2, 4, 2, NA, NA, NA, 9, 9, 3, 3, NA, 3, NA…\n$ idade      <dbl> 16, 23, 24, 33, 23, 35, 31, 17, 22, 29, 28, 22, 27, 25, 26,…\n$ cs_gestant <int> 2, 2, 9, 5, 5, 3, 1, 5, 3, 3, 4, 3, 5, 3, 3, 3, 3, 9, 3, 3,…\n$ puerpera   <int> NA, 2, 1, 1, 1, 2, NA, 1, NA, 1, NA, NA, 1, 2, 1, NA, NA, 1…\n$ febre      <int> 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, 1, 1, 1, 1, 1…\n$ tosse      <int> 1, 2, 2, 1, 2, 1, 1, 1, NA, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1…\n$ garganta   <int> NA, 2, 2, 2, 2, 2, 2, NA, 1, NA, 2, NA, 2, 1, 1, 2, 2, NA, …\n$ dispneia   <int> NA, 1, 2, 2, 2, 2, 2, 1, NA, NA, 1, NA, 2, 1, 2, 1, 1, NA, …\n$ desc_resp  <int> NA, 2, 2, 1, 2, 2, 1, 1, NA, 1, 1, NA, 2, 1, 2, 2, 1, NA, 1…\n$ saturacao  <int> NA, 2, 2, 2, 2, 2, 2, 1, NA, NA, 2, NA, 2, 2, 2, 1, 1, NA, …\n$ diarreia   <int> NA, 1, 2, 2, 1, 2, 2, 1, NA, NA, 2, NA, 2, 1, 2, 2, 2, NA, …\n$ vomito     <int> NA, 2, 2, 2, 2, 2, 2, 2, NA, NA, 2, NA, 2, 1, 2, 2, 2, NA, …\n$ fadiga     <int> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 2, 2, 2, …\n$ perd_olft  <int> NA, NA, NA, NA, 1, 2, NA, NA, NA, NA, 2, NA, NA, 1, 2, 1, 2…\n$ perd_pala  <int> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 1, 2, 2, …\n$ dor_abd    <int> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 2, 2, 2, …\n$ cardiopati <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 1, NA, NA, …\n$ hematologi <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ hepatica   <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ asma       <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ diabetes   <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ neurologic <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 1, NA, NA, …\n$ pneumopati <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ imunodepre <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ renal      <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ obesidade  <int> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ vacina_cov <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_1_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_2_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_1  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_2  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dt_entuti  <date> NA, NA, NA, NA, NA, NA, NA, 2020-06-30, NA, 2020-07-12, NA…\n$ dt_saiduti <date> NA, NA, NA, NA, NA, NA, NA, 2020-07-29, NA, NA, NA, NA, NA…\n$ uti        <int> 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, NA, 2…\n$ suport_ven <int> 2, 3, 3, 2, 3, 3, 9, 1, 3, 3, 3, 3, 3, 2, 3, 2, 1, 2, 3, 2,…\n$ evolucao   <int> 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, NA, 1, 1, 1, 1, 1, 1…\n\n\nAgora vamos lidar com as variáveis qualitativas. Veja que “cs_zona” foi identificada como int. Isso acontece porque ela foi tabulada como número, como posteriormente variáveis deste tipo serão recodificadas de acordo com o dicionário, precisamos tratá-la como fator. Já as demais variáveis qualitativas estão identificadas como numeric, dbl ou chacacter pois na tabulação suas categorias estão codificadas com números ou textos. Para então dizer ao R o verdadeiro tipo dessas variáveis, vamos utilizar os seguintes comandos:\n\ndados$cs_raca <- as.factor(dados$cs_raca)\ndados$cs_escol_n <- as.factor(dados$cs_escol_n)\ndados$cs_gestant <- as.factor(dados$cs_gestant)\ndados$puerpera <- as.factor(dados$puerpera)\ndados$cs_zona <- as.factor(dados$cs_zona)\ndados$febre <- as.factor(dados$febre)\ndados$tosse <- as.factor(dados$tosse)\ndados$suport_ven <- as.factor(dados$suport_ven)\ndados$uti <- as.factor(dados$uti)\ndados$evolucao <- as.factor(dados$evolucao)\n\nUma forma um pouco mais eficiente de fazer isso é selecionar as variáveis por meio de um vetor, por exemplo, quero que as variáveis da coluna 10 até a coluna 20 sejam fatores. Podemos fazer isso com a ajuda a função lapply. Essa função, em resumo, nos possibilita aplicar uma função em uma lista de elementos e retorna uma lista de mesmo tamanho em que o resultado é a aplicação desta função a cada elemento da lista. Neste caso, aplicamos a função as.factor nas colunas selecionadas (lista de elementos). Veja como é feito.\n\n\ndados[,c(17:37)] <- lapply(dados[,c(17:37)], as.factor)\nglimpse(dados)\n\nRows: 11,523\nColumns: 46\n$ dt_notific <date> 2020-05-15, 2020-05-18, 2020-04-30, 2020-05-11, 2020-07-01…\n$ dt_sin_pri <date> 2020-05-06, 2020-05-10, 2020-04-20, 2020-05-04, 2020-06-12…\n$ dt_nasc    <date> 2003-06-03, 1996-07-07, 1996-03-26, 1986-06-02, 1996-12-11…\n$ dt_interna <date> 2020-05-15, 2020-05-15, 2020-04-24, 2020-05-09, 2020-06-30…\n$ sem_pri    <int> 19, 20, 17, 19, 24, 24, 26, 27, 28, 24, 14, 29, 28, 10, 36,…\n$ sg_uf      <chr> \"CE\", \"PR\", \"SP\", \"PA\", \"DF\", \"RO\", \"PI\", \"RS\", \"PE\", \"MA\",…\n$ id_mn_resi <chr> \"MORRINHOS\", \"CURITIBA\", \"SAO CAETANO DO SUL\", \"MARABA\", \"S…\n$ co_mun_res <int> 230890, 410690, 354880, 150420, 530150, 110020, 221100, 431…\n$ cs_zona    <fct> NA, 1, 1, 1, 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, NA, 1, 1, NA, 2…\n$ cs_raca    <fct> 4, 1, 9, 4, 9, 4, 9, 1, 4, 9, 4, 4, 4, 4, 4, 9, 4, 9, 4, 4,…\n$ cs_escol_n <fct> NA, 2, 9, 4, NA, 2, 4, 2, NA, NA, NA, 9, 9, 3, 3, NA, 3, NA…\n$ idade      <dbl> 16, 23, 24, 33, 23, 35, 31, 17, 22, 29, 28, 22, 27, 25, 26,…\n$ cs_gestant <fct> 2, 2, 9, 5, 5, 3, 1, 5, 3, 3, 4, 3, 5, 3, 3, 3, 3, 9, 3, 3,…\n$ puerpera   <fct> NA, 2, 1, 1, 1, 2, NA, 1, NA, 1, NA, NA, 1, 2, 1, NA, NA, 1…\n$ febre      <fct> 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, 1, 1, 1, 1, 1…\n$ tosse      <fct> 1, 2, 2, 1, 2, 1, 1, 1, NA, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1…\n$ garganta   <fct> NA, 2, 2, 2, 2, 2, 2, NA, 1, NA, 2, NA, 2, 1, 1, 2, 2, NA, …\n$ dispneia   <fct> NA, 1, 2, 2, 2, 2, 2, 1, NA, NA, 1, NA, 2, 1, 2, 1, 1, NA, …\n$ desc_resp  <fct> NA, 2, 2, 1, 2, 2, 1, 1, NA, 1, 1, NA, 2, 1, 2, 2, 1, NA, 1…\n$ saturacao  <fct> NA, 2, 2, 2, 2, 2, 2, 1, NA, NA, 2, NA, 2, 2, 2, 1, 1, NA, …\n$ diarreia   <fct> NA, 1, 2, 2, 1, 2, 2, 1, NA, NA, 2, NA, 2, 1, 2, 2, 2, NA, …\n$ vomito     <fct> NA, 2, 2, 2, 2, 2, 2, 2, NA, NA, 2, NA, 2, 1, 2, 2, 2, NA, …\n$ fadiga     <fct> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 2, 2, 2, …\n$ perd_olft  <fct> NA, NA, NA, NA, 1, 2, NA, NA, NA, NA, 2, NA, NA, 1, 2, 1, 2…\n$ perd_pala  <fct> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 1, 2, 2, …\n$ dor_abd    <fct> NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, 2, NA, NA, 2, 2, 2, …\n$ cardiopati <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 1, NA, NA, …\n$ hematologi <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ hepatica   <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ asma       <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ diabetes   <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ neurologic <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 1, NA, NA, …\n$ pneumopati <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ imunodepre <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ renal      <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ obesidade  <fct> NA, 2, 2, 2, 2, 2, NA, 2, NA, NA, NA, NA, 2, 2, 2, NA, NA, …\n$ vacina_cov <fct> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_1_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_2_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_1  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_2  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dt_entuti  <date> NA, NA, NA, NA, NA, NA, NA, 2020-06-30, NA, 2020-07-12, NA…\n$ dt_saiduti <date> NA, NA, NA, NA, NA, NA, NA, 2020-07-29, NA, NA, NA, NA, NA…\n$ uti        <fct> 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, NA, 2…\n$ suport_ven <fct> 2, 3, 3, 2, 3, 3, 9, 1, 3, 3, 3, 3, 3, 2, 3, 2, 1, 2, 3, 2,…\n$ evolucao   <fct> 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, NA, 1, 1, 1, 1, 1, 1…\n\n\nÓtimo! Corrigimos as inconsistências das variáveis qualitativas. Mas outra questão surge: como faço para usar um rótulo nos números codificados nas categorias das variáveis qualitativas? Para o grupo, por exemplo, ao invés de aparecer 1 quero que apareça “sim”. Para isso, vamos utilizar o pacote forcats que lida com variáveis qualitativas (categóricas). Para renomear as categorias das variáveis, vamos usar a função fct_recode desse pacote:\n\ndados$cs_raca <- forcats::fct_recode(dados$cs_raca,\n                                   branca = \"1\",\n                                   preta = \"2\",\n                                   amarela = \"3\",\n                                   parda = \"4\",\n                                   indigena = \"5\",\n                                   ignorado = \"9\")\n\ndados$cs_escol_n <- forcats::fct_recode(dados$cs_escol_n,\n                                     \"sem escola\"  = \"0\",\n                                     fund1 = \"1\",\n                                     fund2 = \"2\",\n                                     medio = \"3\",\n                                     superior = \"4\",\n                                     ignorado = \"9\")\n\ndados$cs_gestant <- forcats::fct_recode(dados$cs_gestant,\n                                     \"1tri\" = \"1\",\n                                     \"2tri\" = \"2\",\n                                     \"3tri\" = \"3\",\n                                     IG_ig = \"4\",\n                                     nao = \"5\",\n                                     ignorado = \"9\")\n\ndados$puerpera <- forcats::fct_recode(dados$puerpera,\n                                      sim = \"1\",\n                                      nao = \"2\",\n                                      ignorado = \"9\")\n\ndados$cs_zona <- forcats::fct_recode(dados$cs_zona,\n                                  urbana = \"1\",\n                                  rural = \"2\",\n                                  periurbana = \"3\",\n                                  ignorado = \"9\")\n\ndados$febre <- forcats::fct_recode(dados$febre,\n                                   sim = \"1\",\n                                   nao = \"2\",\n                                   ignorado = \"9\")\n\ndados$suport_ven <-forcats::fct_recode(dados$suport_ven,\n                                       \"sim, invasivo\" = \"1\",\n                                       \"sim, nao invasivo\" = \"2\",\n                                       nao = \"3\",\n                                       ignorado = \"9\")\n\ndados$uti <-forcats::fct_recode(dados$uti,\n                                       sim = \"1\",\n                                       nao = \"2\",\n                                       ignorado = \"9\")\n\ndados$evolucao <-forcats::fct_recode(dados$evolucao,\n                                       cura = \"1\",\n                                       obito = \"2\",\n                                       \"obito por outras causas\" = \"3\",\n                                       ignorado = \"9\")\n\nEste tramanto foi feito para todas as variáveis qualitativas da base, mas por conta do tamanho do código, omitimos algumas da saída.\nFinalmente chegamos nas variáveis quantitativas. Uma forma de identificar problemas em variáveis quantitativas é avaliar os valores mínimo e máximo de cada variável e ver se tem algum valor impossível para a mesma. Em nosso caso podemos verificar a variável idade. Seria meio estranho encontrar alguém com valores extremamente altos ou negativos, concorda?! A função summary pode ser uma opção boa aqui, ela nos formece algumas medidas descritivas como, media, mínimo, máximo, entre outros.\n\nsummary(dados$idade)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  10.00   25.00   30.00   30.25   35.00   55.00       9 \n\n\nAparentemente nossa variável esta dentro do esperado, sem valores inesperados.\n\n2.0.3.1 Transformação de dados\nÉ possível modificar ou criar novas variáveis na base de dados por meio da função mutate do pacote dplyr, você pode veificar melhor essa função clicando aqui. Também podemos criar categorias com base em alguma condição por meio da função case_when também do pacote dplyr, veja melhor aqui. Para ficar mais claro, vamos a um exemplo combinando as duas funções. Vamos criar a variável “faixa_et”, onde as observações serão as faixas etárias. São essas: “<20”, “20-34” e “>=”. Veja como faz:\n\ndados <- dados |> \n  mutate(faixa_et = case_when(\n    idade < 20 ~ \"<20\",\n    idade >= 20 & idade < 34 ~ \"20-34\",\n    idade >= 34 ~ \">=34\"\n  ))\n\ntable(dados$faixa_et)#table nos mostra as observações da quela variável e a sua frequência. \n\n\n  <20  >=34 20-34 \n  714  3862  6938 \n\n\nAqui fizemos a utilização da função “pipe” |> que agora está no pacote base do R, mas que antes era necessário carregá-la por meio de pacotes. Essa função é de extrema importância, facilita a programção no R de uma forma inimaginável. É válido dedicar um pouco de seu tempo para entender melhor essa função. Separamos alguns links que pode te ajudar a entender melhor e você pode acessá-los clickando aqui, aqui ou aqui. Como foi mencionado acima, a função foi adicionada ao R base há pouco tempo, então esses links se referem ao pipe “antigo”, mas fique tranquilo, a função é a mesma. Para resumir, o pipe pega a saída de uma função e a passa para outra função como um argumento. Isso nos permite vincular uma sequência de etapas de análise.\n\n\n2.0.3.2 Manipulação de datas\nAlgo interessante também é trabalhar com a varíavel de datas. Podemos calulcar a diferença entre duas datas no R de forma bem simples por meio da função difftime do pacote base do R. Para exemplificar vamos criar a variável “dias_uti” que vai ser ser quantos dias a pessoa ficou internada na uti. Vamos fazer isso calculando a diferença entre a data de saída e a data de entrada na uti e queremos o resultado em dias.\n\ndados$dias_uti <- difftime(dados$dt_saiduti, dados$dt_entuti, units = \"days\")\nglimpse(dados)\n\nRows: 11,523\nColumns: 48\n$ dt_notific <date> 2020-05-15, 2020-05-18, 2020-04-30, 2020-05-11, 2020-07-01…\n$ dt_sin_pri <date> 2020-05-06, 2020-05-10, 2020-04-20, 2020-05-04, 2020-06-12…\n$ dt_nasc    <date> 2003-06-03, 1996-07-07, 1996-03-26, 1986-06-02, 1996-12-11…\n$ dt_interna <date> 2020-05-15, 2020-05-15, 2020-04-24, 2020-05-09, 2020-06-30…\n$ sem_pri    <int> 19, 20, 17, 19, 24, 24, 26, 27, 28, 24, 14, 29, 28, 10, 36,…\n$ sg_uf      <chr> \"CE\", \"PR\", \"SP\", \"PA\", \"DF\", \"RO\", \"PI\", \"RS\", \"PE\", \"MA\",…\n$ id_mn_resi <chr> \"MORRINHOS\", \"CURITIBA\", \"SAO CAETANO DO SUL\", \"MARABA\", \"S…\n$ co_mun_res <int> 230890, 410690, 354880, 150420, 530150, 110020, 221100, 431…\n$ cs_zona    <fct> NA, urbana, urbana, urbana, urbana, urbana, urbana, urbana,…\n$ cs_raca    <fct> parda, branca, ignorado, parda, ignorado, parda, ignorado, …\n$ cs_escol_n <fct> NA, fund2, ignorado, superior, NA, fund2, superior, fund2, …\n$ idade      <dbl> 16, 23, 24, 33, 23, 35, 31, 17, 22, 29, 28, 22, 27, 25, 26,…\n$ cs_gestant <fct> 2tri, 2tri, ignorado, nao, nao, 3tri, 1tri, nao, 3tri, 3tri…\n$ puerpera   <fct> NA, nao, sim, sim, sim, nao, NA, sim, NA, sim, NA, NA, sim,…\n$ febre      <fct> sim, nao, sim, sim, nao, sim, sim, sim, sim, sim, sim, NA, …\n$ tosse      <fct> sim, nao, nao, sim, nao, sim, sim, sim, NA, sim, sim, sim, …\n$ garganta   <fct> NA, nao, nao, nao, nao, nao, nao, NA, sim, NA, nao, NA, nao…\n$ dispneia   <fct> NA, sim, nao, nao, nao, nao, nao, sim, NA, NA, sim, NA, nao…\n$ desc_resp  <fct> NA, nao, nao, sim, nao, nao, sim, sim, NA, sim, sim, NA, na…\n$ saturacao  <fct> NA, nao, nao, nao, nao, nao, nao, sim, NA, NA, nao, NA, nao…\n$ diarreia   <fct> NA, sim, nao, nao, sim, nao, nao, sim, NA, NA, nao, NA, nao…\n$ vomito     <fct> NA, nao, nao, nao, nao, nao, nao, nao, NA, NA, nao, NA, nao…\n$ fadiga     <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, nao, …\n$ perd_olft  <fct> NA, NA, NA, NA, sim, nao, NA, NA, NA, NA, nao, NA, NA, sim,…\n$ perd_pala  <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, sim, …\n$ dor_abd    <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, nao, …\n$ cardiopati <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ hematologi <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ hepatica   <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ asma       <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ diabetes   <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ neurologic <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ pneumopati <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ imunodepre <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ renal      <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ obesidade  <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ vacina_cov <fct> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_1_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_2_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_1  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_2  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dt_entuti  <date> NA, NA, NA, NA, NA, NA, NA, 2020-06-30, NA, 2020-07-12, NA…\n$ dt_saiduti <date> NA, NA, NA, NA, NA, NA, NA, 2020-07-29, NA, NA, NA, NA, NA…\n$ uti        <fct> nao, nao, nao, nao, nao, nao, nao, sim, nao, sim, nao, nao,…\n$ suport_ven <fct> \"sim, nao invasivo\", \"nao\", \"nao\", \"sim, nao invasivo\", \"na…\n$ evolucao   <fct> cura, cura, cura, cura, cura, cura, cura, obito, cura, cura…\n$ faixa_et   <chr> \"<20\", \"20-34\", \"20-34\", \"20-34\", \"20-34\", \">=34\", \"20-34\",…\n$ dias_uti   <drtn> NA days, NA days, NA days, NA days, NA days, NA days, NA d…\n\n\nNote que não utilizamos a função mutate para criar está nova variável, utilizamos apenas o $ para representar a variável e atribuímos a função. Assim, o R já entende como uma variável.\n\n\n2.0.3.3 Manipulação de dados\nJá temos a nossa base de dados devidamente tratada para prosseguir com a análise descritiva, mas quando falamos de manipulação de dados, um leque de possibilidades aparece. Em diversos cenários precisamos filtrar observações, reordená-las, selecionar variáveis específicas, entre outras coisas. Não poderíamos deixar de mencionar o poderoso tidyverse. O tidyverse é um pacote que contém um coleção de outros pacotes que são utilizados para manipulação, exploração e visualização de dados e que compartilham uma filosofia de design bem parecida, por isso de forma combinada permitem que você consiga fazer inúmeros trabalhos. Os pacotes que fazem parte desse universo são: dplyr, tidyr, ggplot2, forcats, purrr, stringr, tibble e readr. Anteriormente já trabalhamos com alguns destes pacotes, mas agora é válido aprofundarmos um pouco mais em alguns deles. Aqui você irá acessar o site do tidyverse onde podera navegar por cada pacote e aprender mais sobre suas utilidades e aqui você irá acessar um post escrito pelo Laboratório de Data Scinence - UFES (daslab) que contem diversos exemplos práticos de uso de todos os pacotes do universo tidyverse. Neste capítulo iremos trabalhar com algumas funções específicas.\n\n2.0.3.3.1 Pacote dplyr\nO dplyr é extremamente útil e nos ajuda a resolver os desafios mais comuns de manipulação de dados.\nSuas principais funções são:\n\nfilter() - filtra linhas;\ngroup_by() - agrupa pela(s) variável(is) no argumento. Função muito útil quando usada a funçaõ summurise.\nsummarise() - reduz vários valores a um único resumo.\nselect() - seleciona colunas;\narrange() - ordena a base;\nmutate() - cria/modifica colunas.\n\nJá utilizamos algumas funções do pacote, vamos falar sobre outras. Como já avançamos um pouco sobre a utilização de funções, vamos combinar algumas funções, o que geralmente é feito no dia a dia.\n\n#criando um novo banco de dados selecionando 3 variáveis\ndados_tratamento <- dados |> \n  select(sg_uf, cs_zona, idade)\n\nglimpse(dados_tratamento)\n\nRows: 11,523\nColumns: 3\n$ sg_uf   <chr> \"CE\", \"PR\", \"SP\", \"PA\", \"DF\", \"RO\", \"PI\", \"RS\", \"PE\", \"MA\", \"M…\n$ cs_zona <fct> NA, urbana, urbana, urbana, urbana, urbana, urbana, urbana, ur…\n$ idade   <dbl> 16, 23, 24, 33, 23, 35, 31, 17, 22, 29, 28, 22, 27, 25, 26, 20…\n\n\nAqui criamos a base “dados_tratamento” onde apenas selecionamos algumas colunas da base de dados inicial com a função select.\n\ndados_tratamento2 <- dados_tratamento |> \n  filter(cs_zona == \"urbana\") |> \n  group_by(sg_uf) |> \n  summarise(media = mean(idade, na.rm = TRUE)) |> \n  arrange(desc(media))\n\nknitr::kable(head(dados_tratamento2))\n\n\n\n\nsg_uf\nmedia\n\n\n\n\nAP\n36.66667\n\n\nBA\n31.04152\n\n\nRR\n31.00000\n\n\nSP\n30.94237\n\n\nRJ\n30.93570\n\n\nMG\n30.93257\n\n\n\n\n\nVamos entender o código acima. Primeiro acessamos a base “dados_tratamento” e com função filter selecionamos apenas as observações “urbana”. Após isso utilizamos a função group_by para agrupar nossas observações pela variável “sg_uf” e por últimos, combinamos com a função summarise para criar a variável “media” que será a media da variável idade. Note que nesta função utilizamos o argumento na.rm - TRUE. Este argumento serve para indicar para a função se ela deve ou não remover valores NA's do cálculo, o default é FALSE. Como não é possível calcular a média de valores ausentes e temos variáveis ausentes, foi necessário utilizar este argumento. Caso contrário, Estados com valores faltantes ficariam com NA. Por último, utilizamos a função arrange para ordernar os dados em em ordem descrente pela variavel media. Uma dica para tentar entender melhor o funcionamento das funções é tentar refazer o código utilizando uma função de cada vez e ir vendo como fica. Então, em poucas linhas de códigos conseguimos criar uma base com a idade média dos Estados considerando apenas zonas urbanas, legal né?\n\n\n2.0.3.3.2 Pacote stringr\nUm desafio muito grande na manipulação de dados é extrair informações de caracteres. Em resumo caracteres são letras, símbolos, sinais, números que representem algo escrito, etc.. Essa sequência de caracteres formam o que chamamos de string. Diversas vezes encontramos variáveis com categorias não padronizadas, como, por exemplo, uma variável contendo “São Paulo”, “sao paulo” e “sp”. Apesar de representarem o mesmo estado, elas são diferentes. Nesse sentido, uma parte muito importante no tratamento de dados é “lapidar” esse conjunto de caracteres para que seja possível usá-los nas análises. Essa é a introdução do post do daslab onde é passado de uma maneira muito prática como trabalhar com strings utilizando o pacote stringr, la você vai aprender também sobre expressões regulares, que com certeza serão úteis em vários momentos da sua carreira. Link do post. Como as variáveis de texto do nosso banco de dados já estão bem padronizadas não será necessário realizar nenhum tratamento, mas por ser um pacote de extrema importância e que não havia sido mencionado ainda, deixamos ele aqui para que você possa se aprofundar mais. Como em nossa base dados as variáveis de texto estão padrozinados, não será necessário realizar nenhum tratamento.\n\n\n\n2.0.3.4 Manipulando o formato da base de dados\nEm certos casos é necessário mudar o formato das bases de dados, fazer com que colunas se tornem linhas vice-versa. Vamos utilizar a base “dados_tratamento”. Veja que ela está no formato long, em que as avaliações do mesmo indivíduo (variável de identificação de indivíduo é “registro”) estão nas linhas. Queremos que as zonas fiquem nas colunas, com as três colunas (vamos tirar valores ignorados): urbana, rural e periurbana, ou seja, queremos o formato wide. Um pacote do R que pode nos auxiliar a transformar formato long em wide e vice-versa é o tidyr. A função que usaremos é spread, como segue:\n\nlibrary(tidyr)\n\ndados_formato <- dados_tratamento |> \n  filter(!is.na(cs_zona) & cs_zona != \"ignorado\") |> \n  mutate(id = row_number())\n\nknitr::kable(head(dados_formato))\n\n\n\n\nsg_uf\ncs_zona\nidade\nid\n\n\n\n\nPR\nurbana\n23\n1\n\n\nSP\nurbana\n24\n2\n\n\nPA\nurbana\n33\n3\n\n\nDF\nurbana\n23\n4\n\n\nRO\nurbana\n35\n5\n\n\nPI\nurbana\n31\n6\n\n\n\n\n\nFizemos pequenas alterações na base de dados. Primeiro realizamos um filtro para retirarmos valores faltantes da variável “cs_zona”, pois essa passará a\n\ndados_formato2 <- dados_formato |> \n  pivot_wider(names_from = cs_zona, values_from = idade)  \n\nknitr::kable(head(dados_formato2))\n\n\n\n\nsg_uf\nid\nurbana\nrural\nperiurbana\n\n\n\n\nPR\n1\n23\nNA\nNA\n\n\nSP\n2\n24\nNA\nNA\n\n\nPA\n3\n33\nNA\nNA\n\n\nDF\n4\n23\nNA\nNA\n\n\nRO\n5\n35\nNA\nNA\n\n\nPI\n6\n31\nNA\nNA\n\n\n\n\n\n\ndados_formato3 <- dados_formato2 |> \n  pivot_longer(cols = c(\"urbana\",   \"rural\",    \"periurbana\"), names_to = \"cs_zona\", values_to = \"idade\")\n\nknitr::kable(head(dados_formato3))\n\n\n\n\nsg_uf\nid\ncs_zona\nidade\n\n\n\n\nPR\n1\nurbana\n23\n\n\nPR\n1\nrural\nNA\n\n\nPR\n1\nperiurbana\nNA\n\n\nSP\n2\nurbana\n24\n\n\nSP\n2\nrural\nNA\n\n\nSP\n2\nperiurbana\nNA\n\n\n\n\n\n\n\n2.0.3.5 Combinando bases de dados\nQuando estamos trabalhando com dados, nem sempre uma única base irá conter todas as informações que precisamos, na verdade, isso é mais comum do que se possa imaginar. Assim, saber juntar duas bases de dados é indispensável. Vamos começar então falando sobre chave primária. Em resumo, chave primária se refere a um ou mais campos, onde combinados (no caso de mais de uma chave primária), não se repete na mesma tabela. Em outras palavras, uma chave primária no meu banco dados seria uma variável onde as observações não se repetem ou a combinação de variáveis que tornam as observações únicas. Para exemplicar vamos pegar nossa base de dados e separar em duas, para que posteriormente possamos juntalas. Como em nossa base de dados não temos naturalmente nenhuma chave primária, vamos utilizar a função mutate(id = row_number()) para criarmos um identificar único para este exemplo. Após isso, vamos dividir a nossa base de dados em duas, mantendo em comum entre elas apenas a nossa chave primária, neste caso, a variável “id”\n\ndados <- dados |> \n  mutate(id = row_number()) |> \n  select(id, everything())#selecionar variavel id e todas as outras \n\ndados1 <- dados[, c(1:24)]\n\nglimpse(dados1)\n\nRows: 11,523\nColumns: 24\n$ id         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ dt_notific <date> 2020-05-15, 2020-05-18, 2020-04-30, 2020-05-11, 2020-07-01…\n$ dt_sin_pri <date> 2020-05-06, 2020-05-10, 2020-04-20, 2020-05-04, 2020-06-12…\n$ dt_nasc    <date> 2003-06-03, 1996-07-07, 1996-03-26, 1986-06-02, 1996-12-11…\n$ dt_interna <date> 2020-05-15, 2020-05-15, 2020-04-24, 2020-05-09, 2020-06-30…\n$ sem_pri    <int> 19, 20, 17, 19, 24, 24, 26, 27, 28, 24, 14, 29, 28, 10, 36,…\n$ sg_uf      <chr> \"CE\", \"PR\", \"SP\", \"PA\", \"DF\", \"RO\", \"PI\", \"RS\", \"PE\", \"MA\",…\n$ id_mn_resi <chr> \"MORRINHOS\", \"CURITIBA\", \"SAO CAETANO DO SUL\", \"MARABA\", \"S…\n$ co_mun_res <int> 230890, 410690, 354880, 150420, 530150, 110020, 221100, 431…\n$ cs_zona    <fct> NA, urbana, urbana, urbana, urbana, urbana, urbana, urbana,…\n$ cs_raca    <fct> parda, branca, ignorado, parda, ignorado, parda, ignorado, …\n$ cs_escol_n <fct> NA, fund2, ignorado, superior, NA, fund2, superior, fund2, …\n$ idade      <dbl> 16, 23, 24, 33, 23, 35, 31, 17, 22, 29, 28, 22, 27, 25, 26,…\n$ cs_gestant <fct> 2tri, 2tri, ignorado, nao, nao, 3tri, 1tri, nao, 3tri, 3tri…\n$ puerpera   <fct> NA, nao, sim, sim, sim, nao, NA, sim, NA, sim, NA, NA, sim,…\n$ febre      <fct> sim, nao, sim, sim, nao, sim, sim, sim, sim, sim, sim, NA, …\n$ tosse      <fct> sim, nao, nao, sim, nao, sim, sim, sim, NA, sim, sim, sim, …\n$ garganta   <fct> NA, nao, nao, nao, nao, nao, nao, NA, sim, NA, nao, NA, nao…\n$ dispneia   <fct> NA, sim, nao, nao, nao, nao, nao, sim, NA, NA, sim, NA, nao…\n$ desc_resp  <fct> NA, nao, nao, sim, nao, nao, sim, sim, NA, sim, sim, NA, na…\n$ saturacao  <fct> NA, nao, nao, nao, nao, nao, nao, sim, NA, NA, nao, NA, nao…\n$ diarreia   <fct> NA, sim, nao, nao, sim, nao, nao, sim, NA, NA, nao, NA, nao…\n$ vomito     <fct> NA, nao, nao, nao, nao, nao, nao, nao, NA, NA, nao, NA, nao…\n$ fadiga     <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, nao, …\n\ndados2 <- dados[, c(1, 25:49)]\n\nglimpse(dados2)\n\nRows: 11,523\nColumns: 26\n$ id         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ perd_olft  <fct> NA, NA, NA, NA, sim, nao, NA, NA, NA, NA, nao, NA, NA, sim,…\n$ perd_pala  <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, sim, …\n$ dor_abd    <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, nao, …\n$ cardiopati <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ hematologi <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ hepatica   <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ asma       <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ diabetes   <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ neurologic <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ pneumopati <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ imunodepre <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ renal      <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ obesidade  <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ vacina_cov <fct> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_1_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_2_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_1  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_2  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dt_entuti  <date> NA, NA, NA, NA, NA, NA, NA, 2020-06-30, NA, 2020-07-12, NA…\n$ dt_saiduti <date> NA, NA, NA, NA, NA, NA, NA, 2020-07-29, NA, NA, NA, NA, NA…\n$ uti        <fct> nao, nao, nao, nao, nao, nao, nao, sim, nao, sim, nao, nao,…\n$ suport_ven <fct> \"sim, nao invasivo\", \"nao\", \"nao\", \"sim, nao invasivo\", \"na…\n$ evolucao   <fct> cura, cura, cura, cura, cura, cura, cura, obito, cura, cura…\n$ faixa_et   <chr> \"<20\", \"20-34\", \"20-34\", \"20-34\", \"20-34\", \">=34\", \"20-34\",…\n$ dias_uti   <drtn> NA days, NA days, NA days, NA days, NA days, NA days, NA d…\n\n\nEm “dados1” selecionamos as colunas de 1 até a 24, onde a coluna 1 é a variável “id”. Em dados 2 selecionamos a coluna depois e as colunas de 25 até a 49. Agora temos dois banco de dados e precisamos juntá-los.\nHá algumas funções de combinação de duas bases de dados no pacote dplyr. Elas recebem três argumentos: a primeira base a ser declarada (x=), a segunda base a ser declarada (y=) e a variável de identificação informada no argumento by=. Aqui estão as funções mais úteis:\n\nleft_join() - retorna todas as linhas da base de dados no argumento x e todas as colunas das duas bases de dados. Linhas da base de dados de x sem correspondentes em y receberão NA na base de dados combinada.\nright_join() - retorna todas as linhas da base de dados no argumento y e todas as colunas das duas bases de dados. Linhas da base de dados de y sem correspondentes em x receberão NA na base de dados combinada.\nfull_join() - retorna todas as linhas e todas as colunas de x e de y. As linhas sem correspondência entre as bases receberão NA na base de dados combinada.\ninner_join() - filtra a base de dados no argumento x apenas onde tem valores correspondentes na base de dados no argumento y e todas as colunas das duas bases de dados.\nsemi_join() - filtra a base de dados no argumento x apenas onde tem valores correspondentes na base de dados no argumento y, mantendo apenas as colunas da base de dados de x.\nanti_join() - filtra a base de dados no argumento x para incluir apenas valores que não possuem correspondências na base de dados no argumento y.\n\nAssim sendo, no nosso exemplo, tanto as funções left_join(), right_join(), full_join() e inner_join() retornarão a mesma combinação, pois “dados1” e “dados2” possuem exatamente os mesmos indivíduos, ou seja, não há nenhuma linha que esteja em uma das bases de dados e que não está na outra. Este cenário foi um pouco mais simples, mas pense que no dia a dia você irá encontrar bases onde você precisará encontrar chaves primarias entre elas. Além disso, varios problemas podem vir acompanhados, por exemplo, imagine que para juntar duas bases você utilizará uma chave formada pela combinação de duas variáveis: UF e Município. Em uma base a sua UF está no formato de sigla e na outra está sendo representada pelo código da UF atribuido pelo IBGE. Já na variável de Município, Em uma base os dados estão todos padronizados, maiúsculos e sem acentuação, já na outra base está no formato “padrão” com a primeira letra maiúscula e acentuação. Veja que será necessário um bom tratamento de dados para pode juntar essas bases. Voltando para o nosso exemplo, vamos a prática.\n\ndados_todos <- full_join(dados1, dados2, by=c(\"id\")) \n\nglimpse(dados_todos)\n\nRows: 11,523\nColumns: 49\n$ id         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ dt_notific <date> 2020-05-15, 2020-05-18, 2020-04-30, 2020-05-11, 2020-07-01…\n$ dt_sin_pri <date> 2020-05-06, 2020-05-10, 2020-04-20, 2020-05-04, 2020-06-12…\n$ dt_nasc    <date> 2003-06-03, 1996-07-07, 1996-03-26, 1986-06-02, 1996-12-11…\n$ dt_interna <date> 2020-05-15, 2020-05-15, 2020-04-24, 2020-05-09, 2020-06-30…\n$ sem_pri    <int> 19, 20, 17, 19, 24, 24, 26, 27, 28, 24, 14, 29, 28, 10, 36,…\n$ sg_uf      <chr> \"CE\", \"PR\", \"SP\", \"PA\", \"DF\", \"RO\", \"PI\", \"RS\", \"PE\", \"MA\",…\n$ id_mn_resi <chr> \"MORRINHOS\", \"CURITIBA\", \"SAO CAETANO DO SUL\", \"MARABA\", \"S…\n$ co_mun_res <int> 230890, 410690, 354880, 150420, 530150, 110020, 221100, 431…\n$ cs_zona    <fct> NA, urbana, urbana, urbana, urbana, urbana, urbana, urbana,…\n$ cs_raca    <fct> parda, branca, ignorado, parda, ignorado, parda, ignorado, …\n$ cs_escol_n <fct> NA, fund2, ignorado, superior, NA, fund2, superior, fund2, …\n$ idade      <dbl> 16, 23, 24, 33, 23, 35, 31, 17, 22, 29, 28, 22, 27, 25, 26,…\n$ cs_gestant <fct> 2tri, 2tri, ignorado, nao, nao, 3tri, 1tri, nao, 3tri, 3tri…\n$ puerpera   <fct> NA, nao, sim, sim, sim, nao, NA, sim, NA, sim, NA, NA, sim,…\n$ febre      <fct> sim, nao, sim, sim, nao, sim, sim, sim, sim, sim, sim, NA, …\n$ tosse      <fct> sim, nao, nao, sim, nao, sim, sim, sim, NA, sim, sim, sim, …\n$ garganta   <fct> NA, nao, nao, nao, nao, nao, nao, NA, sim, NA, nao, NA, nao…\n$ dispneia   <fct> NA, sim, nao, nao, nao, nao, nao, sim, NA, NA, sim, NA, nao…\n$ desc_resp  <fct> NA, nao, nao, sim, nao, nao, sim, sim, NA, sim, sim, NA, na…\n$ saturacao  <fct> NA, nao, nao, nao, nao, nao, nao, sim, NA, NA, nao, NA, nao…\n$ diarreia   <fct> NA, sim, nao, nao, sim, nao, nao, sim, NA, NA, nao, NA, nao…\n$ vomito     <fct> NA, nao, nao, nao, nao, nao, nao, nao, NA, NA, nao, NA, nao…\n$ fadiga     <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, nao, …\n$ perd_olft  <fct> NA, NA, NA, NA, sim, nao, NA, NA, NA, NA, nao, NA, NA, sim,…\n$ perd_pala  <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, sim, …\n$ dor_abd    <fct> NA, NA, NA, NA, NA, nao, NA, NA, NA, NA, nao, NA, NA, nao, …\n$ cardiopati <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ hematologi <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ hepatica   <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ asma       <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ diabetes   <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ neurologic <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ pneumopati <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ imunodepre <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ renal      <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ obesidade  <fct> NA, nao, nao, nao, nao, nao, NA, nao, NA, NA, NA, NA, nao, …\n$ vacina_cov <fct> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_1_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dose_2_cov <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_1  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ fab_cov_2  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ dt_entuti  <date> NA, NA, NA, NA, NA, NA, NA, 2020-06-30, NA, 2020-07-12, NA…\n$ dt_saiduti <date> NA, NA, NA, NA, NA, NA, NA, 2020-07-29, NA, NA, NA, NA, NA…\n$ uti        <fct> nao, nao, nao, nao, nao, nao, nao, sim, nao, sim, nao, nao,…\n$ suport_ven <fct> \"sim, nao invasivo\", \"nao\", \"nao\", \"sim, nao invasivo\", \"na…\n$ evolucao   <fct> cura, cura, cura, cura, cura, cura, cura, obito, cura, cura…\n$ faixa_et   <chr> \"<20\", \"20-34\", \"20-34\", \"20-34\", \"20-34\", \">=34\", \"20-34\",…\n$ dias_uti   <drtn> NA days, NA days, NA days, NA days, NA days, NA days, NA d…\n\n\nPronto, temos nossa base completa e aprendemos um pouco sobre manipular dados. O pacote tidyverse será um grande aliado seu no R de forma geral. Como mencionado anteriormente, não cobrimos tudo o que é necessário saber para trabalhar com manipulação de dados, é necessário entender a demanda e pesquisar soluções. Saber traduzir o seu problema para que consiga pesquisar com mais facilidade é uma habilidade muito importante. Recomendamos que treine, trabalhe com diferentes tipos de dados, pesquise pacotes, funções, etc. Com o tempo fará com tranquilidade coisas que hoje considera difícil. Lembre-se, a pratica leva a perfeição."
  },
  {
    "objectID": "supervisionada.html",
    "href": "supervisionada.html",
    "title": "4  Aprendizado supervisionado",
    "section": "",
    "text": "Tópicos:\n\nconceitos iniciais\nalgoritmos supervisionados\naplicações e interpretabilidade\n\n\n4.0.1 Machine learning\n\nfalar sobre ml\nmecionar um pouco sobre Aprendizado supervisionado VS não supervisionado\n“neste capítulo vamos falar sobre aprendizado supervisionado\n\n\n\n4.0.2 Aprendizado supervisionado (conceitos iniciais)\nAprendizado supervisionado pode ser definido como a tarefa de aprender uma função que mapeia uma entrada em uma saída e isso é feito com base em exemplos e treinos. Em outras palavras, uma máquina é treinada para encontrar soluções chamadas rótulos, onde esses rótulos identificam alguma característica. Apesar de também poder ser usada para regressão, o aprendizado supervisionado tem como tafera típica a classificação. Um exemplo bem simples de classificação é: suponha que eu queira classificar imagens de animais, nesse caso possuo um banco de dados com imagens de cachorros e gatos. Quero que meu algoritmo classifique as imagens identificando o tipo do animal na imagem. Para isso o algoritmo é treinado utilizando vários exemplos para que ele consiga classificar novas imagens posteriormente. Outra tafera é predizer um valor com base em características, por exemplo, prever o valor de um carro dado um conjunto de características (quilometragem, idade, marca, etc.) chamadas preditores. Este tipo de tarefa é chamada regressão. Para treinar o sistema é preciso incluir diversos exemplos, assim o banco de dado é separado em treino e teste, onde o é feito o treinamento na base treino para posteriormente serem feitos os testes de predição e avaliação da qualidade do ajuste na base teste.\n\n4.0.2.1 Dificuldades gerais do machine learnig\nComo dito ateriormente, a idéia geral do aprendizado de máquina é contruir um algorito para solucionar os meus problemas, onde esse algoritmo será treinado com dados. Mas, o que acontece se o meu algorito for ruim ou os dados serem ruins.\n\n4.0.2.1.1 Quantidade insuficiente de dados\nFalando sobre dados ruins, o primeiro problema é a quantidade de dados. Já parou pra pensar em quão difícil é treinar uma máquina? voltando no exemplo anterior, para você aprender a diferenciar um cachorro de um gato quando era criança, bastou alguém lhe apontar qual era qual algumas vezes e você se tornou capaz de diferenciar cães de gatos independente das caracteristicas. Uma máquina não consegue fazer isso fácilmente, é necessário uma quantidade grande de dados para a maioria dos algoritmos, até mesmo para problemas simples como o do exemplo citado e para problemas complexos, como reconhecimento de imagem ou fala você pode precisar de milhões de exemplos.\n\n\n4.0.2.1.2 Dados de treino não representativos\nComo mencionado anteriormente, o treinamento de um algoritmo é feito por meio de uma base de dados, onde está é separada em dados de treinamento e de teste, para que eu possa usá-lo e generalizá-lo em dados futuros. Dados de treinamento que não representem bem os dados que serão uzados no futuro podem um modelo que não funcionará bem. Utilizando o exemplo do algoritmo de regressão onde o objetivo era prever os valores dos carros com base em suas características. Digamos que meu algoritmo foi treinado com uma da base de dados de carros apenas do estado de São Paulo, mas meu algoritmo será utilizado para prever carros de todo o país, pode ser que não funcione tão bem. O estados podem alterar significamente os preços dos carros por meio de impostos por exemplo. É de extrema importância utilizar um conjunto de dados de treino que represente bem os dados que você deseja generalizar. Isso pode não ser uma tarefa fácil, pode encontrar problemas com amostras, principalmente se ela for muito pequena e até mesmo uma amostra grande pode não ser representativa.\n\n\n4.0.2.1.3 Qualidade dos dados\nComo pode ter imaginado, a qualidade dos dados também é de extrema importância. Dados com discrenpâncias, vários erros, e gerados a partir de medições de baixa qualidade fará com que fique mais difícil o seu algoritmo identificar padrões e tomar decisões. Se você convive com pessoas do ramo da ciência de dados em geral, é bem provável que ja tenha ouvido alguém dizer algo o tipo: “gastamos a maior parte do nosso tempo para limpar os dados”. Isso não é em vão. Na maioria dos casos, principalmente no ramo de aprendizagem de máquinas é gasto um enorme tempo para limpar os dados pois pode influênciar muito na qualidade do modelo. Por exemplo, se algumas informações forem muito discrepantes, é preciso decidir entre tentar corrigir ou excluí-las. Se uma variável tiver uma quantidade significativa de valores faltantes, deverá ser decidido se essas observações serão excluídas ou se será possível utilizar métodos de imputação de dados. Treinar mais de um modelo com diferentes decisões tomadas sobre os dados também pode ser efetivo.\n\n\n4.0.2.1.4 Sobreajustamento dos dados (Overfitting)\nO sobreajustamento é um conceito que ocorre quando nosso modelo (não só um modelo de aprendizado de máquinas), se ajusta exatamento aos nossos dados de treinamento. Ouvir isso uma primeira vez pode parecer excelente, ou até mesmo o cenário ideal, afinal, queremos que o nosso modelo se ajuste o máximo possível, certo? bom.. não exatamente. O que acontece neste caso, é que o modelo mostra-se adequado apenas para os dados de treino, como se o modelo tivesse apenas decorado os dados de treino e não fosse capaz de generalizar para outros dados nunca vistos antes. Assim, o desempenho do nosso modelo quando usado em novos dados cai drasticamente. Algumas razões que podem levar a um sobreajustamento: base de treino muito pequena, não contendo dados suficientes para representar bem todos valores de entrada possíveis; grande quantidade de informações irrelevantes (dados ruidosos); treinamento excessivo em um único conjunto de amostra; modelo muito complexo, fazendo com que ele aprenda os ruídos nos dados de treinamento. Agora que sabemos o problema que é um sobreajustamento e as razões que podem levar a isso, precisamos falar sobre como evitar que isso aconteça. Existem algumas tecnicas comumente utilizadas.\n\nRegularização: Foi dito anteriormente que uma razão para o sobreajustamento é a complexidade do modelo, então, faz sentido diminuírmos sua complexidade. Isso pode ser feito removendo ou dimuindo o número de parâmetros.\nParada antecipada: Quando um modelo está sendo treinado por radadas de repetição, é possível avaliar cara uma dessa repetição. Nomermalmente o desempenho de um modelo melhora a cada repetição, mas chega um momento em que começa a acontecer o sobreajustamento. A ideia da parada antecipada é pausar o treinamento anter que chegue a esse ponto.\nAumento de dados: Essa técnica consiste em aumentar ligeiramente os dados da amostra toda vez que o modelo os processa, ou seja, injevar dados limpos e relevantes nos dados de treino. Isso faz com que os conjuntos de treino pareçam “exclusivos” do modelo, impedindo que ele aprenda suas características. Mas isso deve ser feito com moderação, pode injetar dados que não estão limpos pode fazer mais mal do que bem. Além disso, não é um método garantido.\n\n\n\n4.0.2.1.5 Existem outras técnicas que podem ser utilizadas para evitar o sobreajustamento. Mas precisamos falar também sobre como detectá-los.\nUma forma não técnica e que não deve ser a sua única forma de tentar identificar o sobreajustamento é por meio da visualização gráfica. A visualização gráfica pode ser usada apenas para levantar hipotéses, nunca para tomar uma decisão final. Até mesmo porque nem sempre é possível verificar esse problema visualmente. Tavelz a técnica mais eficiente para isso é a Validação Cruzada k-fold (k-fold Cross Validation). Valos falar sobre posteriormente.\n\n\n4.0.2.1.6 Subajustamento dos dados (Underfitting)\nComo pode ter imaginado, subajustamento é o oposto do sobreajustamto. Ocorre quando seu modelo é muito simples para aprender a estrutura dos dados. O subjastumento leva à um erro elevado tanto nos dados detreino quanto nos dados de teste. Pode ocorrer quando o modelo não foi treinado por tempo suficiente ou as variáveis ​​de entrada não são significativas o suficiente para determinar uma relação significativa entre as variáveis ​​de entrada e saída. Aqui também estamos em um cenário a ser evitado e apesar de ser contrário ao sobreajustamento, as téncias tanto para identificar quanto para evitar o problema são semelhantes. Um adendo, geralmente, identificar um subajustamento é mais fácil que identificar um sobreajustamento.\n\n\n\n4.0.2.2 Modelo de Regressão Linear\nJá temos uma breve noção sobre o que é aprendizado supervisionado, agora vamos aprofundar um pouco dentro dos modelos. Como foi mencionado aprendizado supervisionado é usado principalmente para métodos de classificação e regressão. Modelo de regressão linear, como o próprio nome já diz, se enquadra nos métodos de regressão. A regressão consiste em modelar um valor de previsão com base em variáveis independentes. De forma mais geral, o modelo conquiste em fazer uma previsão “simples” calculando uma ponderação entre as somas dos recusrso de entrada e uma constante chamada intercepto. Assim, obtemos uma relação linear entre a variável de saída e as variáveis de entrada. A linha de regressão é a linha de melhor ajuste para o modelo\n\\[\n\\hat y = \\beta_0 + \\beta_1x_1 + \\beta_2x_2 + ...+ \\beta_nx_n\n\\]\nonde:\n\n\\(\\hat y\\) é o valor predito\n\\(n\\) o número de características\n\\(x_i\\) é a \\(i^{th}\\) característica\n\\(\\beta_j\\) é o \\(j^{th}\\) parâmetro do modelo\n\nCerto, temos uma definição matemática do nosso modelo, mas como posso treiná-lo? Treinar um modelo significa também definir os parâmetros para que o modelo se ajuste melhor aos meus dados. Em outras palavras, um modelo treinado irá se ajustar a melhor linha para prever o valor de \\(y\\) para um dado valor de \\(x\\). Assim, ao encontrar os melhores valores de \\(\\beta 's\\) obtemos a melhor linha de ajuste. Para isso, primeiro precisamos de uma medida de quão bem (ou mal) o modelo se ajusta aos meus dados. A medida mais comum usada em um modelo de regressão é a Raiz do Erro Quadrático Médio (REQM). Em resumo, o REQM é uma medida de quão espalhados estão esses resíduos. Ele avalia a diferença média quadrática entre os valores observados e previstos. Portanto, treinar um modelo consiste em encontrar os valores de \\(\\beta's\\) que irá minimizar o REQM.\n\\[\nREQM = \\sqrt{\\frac{1}{n}\\sum_{i = 1}^{n}  (\\hat y_i - y_i)^2}\n\\]\nExistem algumas suposições importantes quue devem ser feitas para utilizar um modelo de regressão linear. Estas são algumas verificações formais durante a construção de um modelo de regressão linear, o que garante a obtenção do melhor resultado possível do conjunto de dados fornecido.\n\nSuposição de linearidade: A regressão linear assume que a relação entre a entrada e saída é linear. Pode parecer um pouco óbvio, mas em alguns casos onde, em um primeiro olhar, faça sentido usar uma regressão linar, nossos dados não permitam isso. Pode ser necessário transformar os dados.\nHomocedasticidade: Homocedasticidade é uma situação em que o termo de erro é o mesmo para todos os valores de variáveis ​​independentes. Com homocedasticidade, não deve haver uma distribuição padrão clara de dados no gráfico de dispersão.\nErros normalmente distribuídos: A regressão linear assume que o termo de erro deve seguir o padrão de distribuição normal. Se os termos de erro não forem normalmente distribuídos, os intervalos de confiança se tornarão muito amplos ou muito estreitos, o que pode causar dificuldades em encontrar coeficientes. Você pode obter algum benefício usando transformações (por exemplo, log ou BoxCox) em suas variáveis ​​para tornar sua distribuição mais gaussiana.\nMulticolinearidade: O modelo de regressão linear não assume nenhuma autocorrelação em termos de erro. Se houver alguma correlação no termo de erro, isso reduzirá drasticamente a precisão do modelo. A autocorrelação geralmente ocorre se houver uma dependência entre os erros residuais. Considere calcular correlações pareadas para seus dados de entrada e remover os mais correlacionados.\n\n\n\n4.0.2.3 Modelo de Regressão logística\nAlguns algoritmos de regressão podem ser usados para classificação (o contrário também é valido). A regressão logística é um dos algoritmos mais populares do machine leranrning e geralmente é usada para estimar a probabilidade de que uma instância pertença a uma classe. Por exemplo, qual a probalidade de que o objeto de uma imgagem seja um cachorro? ou um gato? neste caso, se a probabilidade estimada for maior que 50%, então o modelo pode prever que naquela imagem tem um cachorro (classe rotulada como “1”), se for menor, prevê que é um gato (classe rotulada como “0”). Este tipo de regressão pode retornar valores categóricos ou discretos, como: Sim ou Não, 0 ou 1, verdadeiro ou falso, entre outros. Mas aqui, ela fornece os valores probabilísticos que estão entre 0 e 1. Apresar de ser semelhante a regressão linear, aqui não ajustamos uma linha de regressão, mas sim uma função logistica em forma de “S” que prevê os dois valores máximos (0 ou 1).\n\ninserir imagem\n\nA equação de regressão Logística pode ser obtida a partir da equação de Regressão Linear.\n\\[\n\\hat y = \\beta_0 + \\beta_1x_1 + \\beta_2x_2 + ...+ \\beta_nx_n\n\\]\nO problema de usar essa abordagem é que podemos prever probalidades negativas em alguns casos e valores maiores que 1 em outros. Essas previsões não são sensatas, pois sabemos que a verdadeira probabilidade deve ser um número entre 0 e 1. Para resolver esse problema, devemos modelar \\(\\hat y\\) usando uma função que fornceça saídas entre 0 e 1 para todos os valores de \\(\\hat y\\). Na regressão logística usamos a função logística como sendo:\n\\[\n\\hat y = \\frac{e^{\\beta_0+\\beta_1X}}{1 + e^{\\beta_0+\\beta_1X}}\n\\]\nDepois de algumas manipulações, chegamos que\n\\[\n\\frac{\\hat y}{1- \\hat y} = e^{\\beta_0+\\beta_1X}\n\\]\nMas precisamos variar de \\(-\\infty\\) até \\(\\infty\\), então pegue o logaritmo da equação e temos:\n\\[\n\\log\\bigg[\\frac{\\hat y}{1- \\hat y} \\bigg ] = {\\beta_0+\\beta_1X}\n\\]\nExistem alguns tipos de regressão logística:\n\nBinomial: Aqui deve haver apenas dois tipos de possível variáveis, como 0 ou 1, Falso ou Verdadeiro, etc.\nMultinomial: Pode também haver 3 ou mais tipos não ordenados possíveis da variável dependende, como, cachorro, gato ou tigre.\nOrdinal: Na regressão logística ordinal, pode haver 3 ou mais tipos ordenados possíveis de variáveis ​​dependentes, como “baixo”, “médio” ou “alto”.\n\n\n\n4.0.2.4 Validação Cruzada (Cross-Validation)\nAté aqui falamos um pouco sobre alguns problemas que podem ser encontrados no aprendizado de máquinas e superficialmente sobre dois modelos de regressão. Vamos falar agora sobre um método que é bem utilizado para validar a estabilidade do seu modelo. Como mencionamos anteriormente, não podemos simplismente ajustar um modelo aos meus dados de treino e esperar que ele funcione perfeitamente, ou até mesmo esperar que aquele seja o melhor modelo possível ser fazer nenhuma validação. Falamos um pouco sobre isso quando discutimos sobre sobreajustamento e subajustamento. Então, vamos nos aprofundar sobre um método que nos garanta que o nosso modelo obteve a maioria dos padrões dos dados corretos sem captar muitos ruídos.\n\n4.0.2.4.1 O que é validação cruzada?\nValidação cruzada é uma técnica para avaliar um modelo de aprendizado de máquina e tester o seu desempenho. Pode ajudar a comparar e selecionar um modelo mais apropriado para o nosso problema. É bem fácil de entender, de implementar e tende a ter um viés menor do que outros métodos usados para o mesmo objetivo. Por isso é uma ferramenta tão utilizada. Tanto a vaildação cruzada quanto outros algoritmos funcionam de maneira semelhantes, consistem em: divider o conjunto de dados em treino e teste; treinar o modelo no conjunto treino; validar o modelo no conjunto teste e repetir as etapas anteriores algumas vezes. Dentro da validação cruzada existem diversas técnicas onde umas são mais utilizadas. Já mencionamos anteriormente o método k-fold, mas exite também os métodos, hold-out, leave-p-out, k-fold stratified, entre outros. Vamos falar sobre alguns deles.\n\nHold-Out Cross Validation: Está é a tecnica mais simples e comum. Ele consiste em remover uma parte dos dados de treinamento e usá-la para obter previsões do modelo treinado no restante dos dados. A estimativa de erro informa como nosso modelo está se saindo em dados não vistos ou no conjunto de vailidação. A implementação é extremamente fácil e existem pacotes que podem ajudar nisso. Mas apesar disto, esse método tem um grande desvantagem. Se estivermos trabalhando com um conjunto de dados que não é completamente uniforme, podemos acabar em uma situação difícil após a separação. O conjunto de treino pode não representar muito bem o conjunto de teste, ou seja, os conjuntos podem ser bem diferentes, onde um é mais fácil do que o outro.\nK-Fold Cross Validation: O K-Fold pode se apresentar como um técnica que minimiza a desvantagens do método Hold-Out apresentando uma nova maneira de difidir o banco de dados. Neste método os dados são divididos em k subconjuntos (daí o nome). O método de validação é repetido k vezes, onde, a cade vez, um dos k subconjuntos é usado como conjunto de teste e os outros k-1 conjuntos são unidos para formar o conjunto de treinamento. A estimativa de erro é a média de todas as k tentativas. Como cada ponto de dados chega a um conjunto de validação exatamente uma vez e a um conjunto de treinamento k-1 vezes, isso reduz significativamente o viés. Como “regra geral”, k=5 ou k=10 é escolhido, mas não existe nada fixo. Comparando diretamente ao método Hold-Out, o método K-Fold tende a ser melhor, mas também possui uma desvantagem. Aumentar o k resulta no treinamento de mais modelos e o processo de treinamento pode ser custoso e demorado.\nLeave-P-Out Cross Validation: Este método consiste em criar todos os conjuntos de treinamento e testes possíveis usando p amostras como conjunto de teste. Em outras palavras, deixa p pontos de dados fora dos dados de treino, ou seja, se houver n pontos de dados na amostra original, np amostras são usadas para treinar o modelo p pontos são usadas como conjunto teste. Como pode imaginar, este método e extremamente exaustivo, tento em vista que é preciso validar o modelo para todas as comibanções possíveis e para um p demasiadamente grande, pode ser computacionalmente inviável.\n\nO método de validação cruzada também pode nos ajudar a ajustar hiperparâmetros, falaremos sobre isso posteriormente.\n\n\n\n4.0.2.5 Precisão vs intrerpretabilidade\nAté aqui, discutimos muito sobre métodos para obter modelos precisos, com desempenhos ótimos. Obter um modelo que irá prever com excelência um evento em dados não é visto como um modelo valioso, mas, onde entra a interpretabilidade?\na interpretabilidade fornece informações sobre o relacionamento entre as entradas e a saída de um modelo. Um modelo que pode ser interpretado permite responder perguntas sobre por que os recursos independentes predizer aquele atributo dependente. Por exemplo: Um modelo extremamente preciso preciso pode permitir que eu saiba quais os meus clientes “podem” receber créditos ou não, mas se ele não for interpretável, eu nunca saberei o porque. Pense no cenário da saúde, onde eu tenho diversas informações sobre paciêntes e meu modelo pode predizer precisamente quais tem mais probalidade de ser diagnosticado com um doença. Mas já pensou em qual importante é saber quais fatores influênciam isso? porque aquele paciente é mais provável de ser diagnostico com tal doença em relação a outro. Em diversos cenários a interpretabilidade torna-se indispensável dentro dos modelos. A depender do cenário, a interpretabilidade é mais importante que a precisão e vice-versa.\nSaber qual priorizar vai depender muito do cenário em que se encontra. Normalmente a escolha de um determinado algoritmo em detrimento de outro e como a seleção do algoritmo está relacionada ao caso de uso que estamos tentando resolver e ao objetivo de negócios que queremos alcançar. Um modelo com menos parâmetros é mais fácil de interpretar. Isso é intuitivo. Um modelo de regressão linear tem um coeficiente por recurso de entrada e um termo de interceptação. Por exemplo, você pode examinar cada termo e entender como eles contribuem para a saída. Uma árvore de decisões (falaremos mais sobre elas) também costuma ser de fácil interpretação, mas mesmo modelos considerados “interpretáveis” podem se tornar rapidamente não interpretáveis."
  }
]